<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
 xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero" 
 mc:Ignorable="d">
    <!--
  REUXABLES THEMES
  
  Copyright (C) 2007-2009 Nukeation Studios. All rights reserved.
  
  This file is protected by the End-User License Agreement provided at:
  http://reuxables.nukeation.com/files/license.txt
  
  THIS FILE MUST BE COMPILED WITH YOUR EXECUTABLE / ASSEMBLY BEFORE BEING DISTRIBUTED
  THIS NOTICE MUST REMAIN INTACT. DO NOT REMOVE!
  -->

    <Color x:Key="BlackColor">#FF5E7570</Color>
    <Color x:Key="WhiteColor">#FFFFFFFF</Color>
	
	<Color x:Key="PressedColor1">#FFD3DCD4</Color>
	<Color x:Key="PressedColor2">#FFAEBEB2</Color>
	
	<Color x:Key="SelectColor1">#FFBED7DF</Color>
	<Color x:Key="SelectColor2">#FF498091</Color>
	
	<Color x:Key="HighlightColor">#FFF2FCF1</Color>
	
	<LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFF7F9F7" Offset="0.0"/>
		<GradientStop Color="#FFDEE5DD" Offset="1.0"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="NormalBorderBrush" Color="#FFAEBEB2"/>
	<SolidColorBrush x:Key="HightlightBrush" Color="{DynamicResource HighlightColor}"/>
	
	<SolidColorBrush x:Key="MenuBrush" Color="#FF40534A"/>
	<SolidColorBrush x:Key="MenuBorderBrush" Color="#FF6B8075"/>
	
	<LinearGradientBrush x:Key="LightBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFF" Offset="0.0"/>
		<GradientStop Color="#EEE" Offset="1.0"/>
	</LinearGradientBrush>
	
					<LinearGradientBrush x:Key="ListBrush" EndPoint="0,1" StartPoint="0,0">
					<GradientStop Color="#FFDAE4D9" Offset="0.0"/>
					<GradientStop Color="#FFC0C9BF" Offset="1.0"/>
				</LinearGradientBrush>
	
	<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFF9FBF9" Offset="0.0"/>
		<GradientStop Color="{StaticResource HighlightColor}" Offset="0.995"/>
	</LinearGradientBrush>
	
	<LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="{DynamicResource PressedColor1}" Offset="0.0"/>
		<GradientStop Color="{DynamicResource PressedColor2}" Offset="1.0"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="{StaticResource BlackColor}" Offset="0.0"/>
		<GradientStop Color="{StaticResource PressedColor2}" Offset="0.99"/>
	</LinearGradientBrush>

	
		<LinearGradientBrush x:Key="SelectedBackgroundBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="{DynamicResource SelectColor1}" Offset="0.0"/>
		<GradientStop Color="{DynamicResource SelectColor2}" Offset="1.0"/>
	</LinearGradientBrush>
	
	<SolidColorBrush x:Key="ControlBackgroundBrush" Color="#FFdae4d9"/>

	
	<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
	<SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
	<SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>

	
	<SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFD6DED4"/>
	
	
	<LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="{StaticResource PressedColor2}" Offset="0.0"/>
		<GradientStop Color="{StaticResource BlackColor}" Offset="0.995"/>
	</LinearGradientBrush>

	<SolidColorBrush x:Key="SolidBorderBrush" Color="#888"/>
	<SolidColorBrush x:Key="LightBorderBrush" Color="#AAA"/>
	<SolidColorBrush x:Key="LightColorBrush" Color="#DDD"/>
	
	
	<SolidColorBrush x:Key="GlyphBrush" Color="{StaticResource BlackColor}"/>
	
	
	<Style x:Key="NuclearButtonFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="2" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type Button}" BasedOn="{x:Null}">
		<Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template" Value="{DynamicResource NuclearButton}" />
    </Style>

    <ControlTemplate x:Key="NuclearButton"  TargetType="{x:Type Button}">
    	<ControlTemplate.Resources>
    		<Storyboard x:Key="HoverOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    	</ControlTemplate.Resources>

        <Grid x:Name="Grid">
            <Border x:Name="ButtonMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Border BorderThickness="0,1,0,0">
                    <Border.BorderBrush>
                        <SolidColorBrush Color="{DynamicResource HighlightColor}"/>
                    </Border.BorderBrush>
                </Border>
            </Border>
            <Border x:Name="ButtonDefaultBorder" Visibility="Hidden" BorderBrush="#FF8B9F39" BorderThickness="1,1,1,1" Margin="0,0.126,0,-0.126">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFACCA1C" Offset="0"/>
                        <GradientStop Color="#FF95B013" Offset="1"/>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <Border x:Name="ButtonHoverBorder" Margin="1,1,1,1" Background="{DynamicResource MouseOverBrush}" Opacity="0"/>
            <Border x:Name="ButtonPressedBrush" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" Opacity="0"/>

            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="Visibility" TargetName="ButtonDefaultBorder" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="ButtonMainBorder"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true"/>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="ButtonMainBorder"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="ButtonMainBorder"/>
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="RadioButtonFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="15,0,0,0" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="CheckBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="15,0,0,0" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type CheckBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template" Value="{DynamicResource NuclearCheckBox}" />
		<Setter Property="Padding" Value="3,0,0,0"/>
	</Style>

    <ControlTemplate x:Key="NuclearCheckBox"  TargetType="{x:Type CheckBox}">
    	<ControlTemplate.Resources>
    		<Storyboard x:Key="CheckedTrue">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Width)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="11"/>
    			</DoubleAnimationUsingKeyFrames>
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Height)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="10"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="CheckedFalse">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Width)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Height)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckBoxPressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckBoxPressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="ThreeStateOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Width)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="9"/>
    			</DoubleAnimationUsingKeyFrames>
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Height)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="9"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="ThreeStateOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Width)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ThreeState" Storyboard.TargetProperty="(FrameworkElement.Height)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckBoxHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckBoxHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    	</ControlTemplate.Resources>

        <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
                <Grid Width="13" Height="13">
                    <Border x:Name="CheckBoxMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                    <Border x:Name="CheckBoxHoverBorder" Opacity="0" Background="{DynamicResource MouseOverBrush}" BorderBrush="{x:Null}" Margin="1,1,1,1"/>
                    <Border x:Name="CheckBoxPressedBorder" Background="{DynamicResource PressedBrush}" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource PressedBorderBrush}" Opacity="0"/>
                    <Path Stretch="Fill" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2" x:Name="CheckMark" Width="11" Data="M1.0924787,5.372821 L3.1785986,10.519821 10.528543,2.5198207" Margin="0.713,1.43,0.851,1.57" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10" />
                    <Rectangle Fill="{DynamicResource GlyphBrush}" Stroke="{x:Null}" x:Name="ThreeState" Margin="2,2,2,2" RadiusX="1" RadiusY="1" Width="0" Height="0" />
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="True" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="3,0,0,0"/>
        </BulletDecorator>

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource ThreeStateOff}" />
                </Trigger.ExitActions>
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource ThreeStateOn}" />
                </Trigger.EnterActions>
            </Trigger>

            <Trigger Property="IsChecked" Value="false">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource CheckedTrue}"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource CheckedFalse}" x:Name="CheckedFalse_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="CheckBoxMainBorder"/>
				<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="CheckBoxMainBorder"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <Style TargetType="{x:Type RadioButton}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Template" Value="{DynamicResource NuclearRadioButton}" />
		<Setter Property="Padding" Value="3,0,0,0"/>
	</Style>

    <ControlTemplate x:Key="NuclearRadioButton"  TargetType="{x:Type RadioButton}">
    	<ControlTemplate.Resources>
    		<Storyboard x:Key="CheckedTrue">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Width)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="7"/>
    			</DoubleAnimationUsingKeyFrames>
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Height)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="7"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="CheckedFalse">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Width)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(FrameworkElement.Height)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="EllipseHover" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="EllipseHover" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="EllipsePressed" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="EllipsePressed" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    	</ControlTemplate.Resources>

        <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
                <Grid Width="13" Height="13">
                    <Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                    <Ellipse x:Name="EllipseHover" StrokeThickness="1" Fill="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" Opacity="0"/>
                    <Ellipse x:Name="EllipsePressed" StrokeThickness="1" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" Opacity="0"/>
                    <Ellipse x:Name="CheckMark" Fill="{DynamicResource GlyphBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="7" Height="7"/>
                </Grid>
            </BulletDecorator.Bullet>
            <ContentPresenter RecognizesAccessKey="True" Margin="3,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        </BulletDecorator>

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="false">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource CheckedTrue}"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource CheckedFalse}" x:Name="CheckedFalse_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Ellipse_Border"/>
                <Setter Property="Stroke" Value="#40000000" TargetName="Ellipse_Border"/>
                <Setter Property="Foreground" Value="#80000000"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="NuclearRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
		<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="RepeatButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="RepeatButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PressedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="RepeatButtonPressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PressedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="RepeatButtonPressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" Opacity="0" x:Name="RepeatButtonHoverBorder"/>
						<Border x:Name="RepeatButtonPressedBorder" Opacity="0" Background="{DynamicResource PressedBrush}" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource PressedBorderBrush}"/>
						<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="NuclearThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ScrollBarThumbHoverRect" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ScrollBarThumbHoverRect" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PressedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ScrollBarThumbPressedRect" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PressedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ScrollBarThumbPressedRect" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Margin="0,0,0,0" x:Name="Grid">
						<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
						<Rectangle HorizontalAlignment="Stretch" x:Name="ScrollBarThumbHoverRect" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" StrokeThickness="0" Opacity="0"/>
						<Rectangle HorizontalAlignment="Stretch" x:Name="ScrollBarThumbPressedRect" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" Opacity="0"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False"/>
						<Trigger Property="IsDragging" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style x:Key="NuclearScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="IsTabStop" Value="false"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid>
						<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	
	<Style TargetType="{x:Type ScrollBar}">
		<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
		<Setter Property="Foreground" Value="{DynamicResource GlyphBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
						<Grid.RowDefinitions>
							<RowDefinition MaxHeight="18"/>
							<RowDefinition Height="0.00001*"/>
							<RowDefinition MaxHeight="18"/>
						</Grid.RowDefinitions>
						
						<Border Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource NormalBorderBrush}"/>
						
						<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource NuclearRepeatButton}" Command="ScrollBar.LineUpCommand">
							<Grid>
								<Path x:Name="DecreaseArrow" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z" Fill="{TemplateBinding Foreground}"/>
							</Grid>
						</RepeatButton>
						
						<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
							<Track.Thumb>
								<Thumb Style="{DynamicResource NuclearThumbStyle}"/>
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton x:Name="PageUp" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
							</Track.IncreaseRepeatButton>
							<Track.DecreaseRepeatButton>
								<RepeatButton x:Name="PageDown" Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
							</Track.DecreaseRepeatButton>
						</Track>
						
						<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource NuclearRepeatButton}" Command="ScrollBar.LineDownCommand">
							<Grid>
								<Path x:Name="IncreaseArrow" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{TemplateBinding Foreground}"/>
							</Grid>
						</RepeatButton>
					</Grid>
					
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Horizontal">

							<Setter Property="LayoutTransform" TargetName="GridRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
							
							<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
							<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
							<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
							<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
	</Style>
	
	<Style TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
						<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar"   Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar"/>
						<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar"   Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar" Margin="1,1,1,1"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type ListBox}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Background">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Grid>
						<Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
						<ScrollViewer Margin="1"   Focusable="false" Background="{TemplateBinding Background}">
							
							<StackPanel Margin="2" IsItemsHost="true"/>
							
						</ScrollViewer>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	
	<Style d:IsControlPart="True" TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedHoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedHoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid SnapsToDevicePixels="true" Margin="1,1,1,1">
						<Border x:Name="ListItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3,3,3,3"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverBorder"/>
						<Border Background="{DynamicResource SelectedBackgroundBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemSelectedBorder"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverSelectedBorder"/>
						<ContentPresenter VerticalAlignment="Center" Margin="5,3,3,3"/>
					</Grid>
					<ControlTemplate.Triggers>
						
						<MultiTrigger>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedHoverOff}" x:Name="SelectedHoverOff_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedHoverOn}" x:Name="SelectedHoverOn_BeginStoryboard"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						
						<MultiTrigger>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOn_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOff_BeginStoryboard"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						
						<Trigger Property="IsSelected" Value="true">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
							</Trigger.EnterActions>
						</Trigger>
						
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="0,1,0,0"/>
		<Setter Property="BorderBrush" Value="{DynamicResource HightlightBrush}"/>
		<Setter Property="Background" Value="{DynamicResource ListBrush}" />

	</Style>
	
    <Style x:Key="ExpanderHeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle SnapsToDevicePixels="true" Margin="0" Stroke="{DynamicResource GlyphBrush}" StrokeDashArray="1 2" StrokeThickness="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                	<ControlTemplate.Resources>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
                    <Grid Width="Auto" Height="Auto">
                		<Border Background="{DynamicResource NormalBrush}" CornerRadius="0,0,0,0" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource NormalBorderBrush}" x:Name="MainBorder"/>
                		<Border x:Name="HoverBorder" Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Opacity="0"/>
                		<Border x:Name="PressedBorder" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Opacity="0"/>
                    	<Border Padding="{TemplateBinding Padding}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" x:Name="border">
                    		<Grid SnapsToDevicePixels="False" Background="Transparent">
                    			<Grid.ColumnDefinitions>
                    				<ColumnDefinition Width="19" />
                    				<ColumnDefinition Width="*" />
                    			</Grid.ColumnDefinitions>
                    			<Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" Margin="0,1,0,0" />
                    			<Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" Margin="0,1,0,0" />
                    			<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                    		</Grid>
                    	</Border>
                	</Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                        	<Trigger.ExitActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                        	</Trigger.ExitActions>
                        	<Trigger.EnterActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                        	</Trigger.EnterActions>
                        </Trigger>
                    	<Trigger Property="IsPressed" Value="true">
                    		<Trigger.ExitActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                    		</Trigger.ExitActions>
                    		<Trigger.EnterActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                    		</Trigger.EnterActions>
                    	</Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                	<ControlTemplate.Resources>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
                    <Grid Width="Auto" Height="Auto">
                		<Border Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" BorderThickness="1,1,1,1"/>
                		<Border Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" x:Name="HoverBorder" Opacity="0"/>
                		<Border Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" x:Name="PressedBorder" Opacity="0"/>
                    	<Border Padding="{TemplateBinding Padding}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" x:Name="border">
                    		<Grid SnapsToDevicePixels="False" Background="Transparent">
                    			<Grid.RowDefinitions>
                    				<RowDefinition Height="19" />
                    				<RowDefinition Height="*" />
                    			</Grid.RowDefinitions>
                    			<Grid>
                    				<Grid.LayoutTransform>
                    					<TransformGroup>
                    						<TransformGroup.Children>
                    							<TransformCollection>
                    								<RotateTransform Angle="-90" />
                    							</TransformCollection>
                    						</TransformGroup.Children>
                    					</TransformGroup>
                    				</Grid.LayoutTransform>
                    				<Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" Margin="0,1,0,0" />
                    				<Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" Margin="0,1,0,0" />
                    			</Grid>
                    			<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="2,4,4,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
                    				<ContentPresenter.LayoutTransform>
                    					<TransformGroup>
                    						<TransformGroup.Children>
                    							<TransformCollection>
                    								<RotateTransform Angle="-90" />
                    							</TransformCollection>
                    						</TransformGroup.Children>
                    					</TransformGroup>
                    				</ContentPresenter.LayoutTransform>
                    			</ContentPresenter>
                    		</Grid>
                    	</Border>
                	</Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                        </Trigger>
                    	<Trigger Property="IsMouseOver" Value="true">
                    		<Trigger.ExitActions>
                    			<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                    		</Trigger.ExitActions>
                    		<Trigger.EnterActions>
                    			<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                    		</Trigger.EnterActions>
                    	</Trigger>
                    	<Trigger Property="IsPressed" Value="true">
                    		<Trigger.ExitActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                    		</Trigger.ExitActions>
                    		<Trigger.EnterActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                    		</Trigger.EnterActions>
                    	</Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                	<ControlTemplate.Resources>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
                    <Grid>
                		<Border CornerRadius="0,0,0,0" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1"/>
                		<Border Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" x:Name="HoverBorder" Opacity="0"/>
                		<Border Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" x:Name="PressedBorder" Opacity="0"/>
                    	<Border Padding="{TemplateBinding Padding}" CornerRadius="0,0,0,0" BorderThickness="1,1,1,1" x:Name="border">
                    		<Grid SnapsToDevicePixels="False" Background="Transparent">
                    			<Grid.ColumnDefinitions>
                    				<ColumnDefinition Width="19" />
                    				<ColumnDefinition Width="*" />
                    			</Grid.ColumnDefinitions>
                    			<Grid>
                    				<Grid.LayoutTransform>
                    					<TransformGroup>
                    						<TransformGroup.Children>
                    							<TransformCollection>
                    								<RotateTransform Angle="180" />
                    							</TransformCollection>
                    						</TransformGroup.Children>
                    					</TransformGroup>
                    				</Grid.LayoutTransform>
                    				<Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" Margin="0,1,0,0" />
                    				<Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" Margin="0,1,0,0" />
                    			</Grid>
                    			<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,2,0,2" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                    		</Grid>
                    	</Border>
                	</Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                        </Trigger>
                    	<Trigger Property="IsMouseOver" Value="true">
                    		<Trigger.ExitActions>
                    			<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                    		</Trigger.ExitActions>
                    		<Trigger.EnterActions>
                    			<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                    		</Trigger.EnterActions>
                    	</Trigger>
                    	<Trigger Property="IsPressed" Value="true">
                    		<Trigger.ExitActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                    		</Trigger.ExitActions>
                    		<Trigger.EnterActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                    		</Trigger.EnterActions>
                    	</Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                	<ControlTemplate.Resources>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
                    <Grid>
                		<Border x:Name="MainBorder" Background="{DynamicResource NormalBrush}" CornerRadius="0,0,0,0" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource NormalBorderBrush}"/>
                    	<Border Margin="1,1,1,1" x:Name="HoverBorder" Background="{DynamicResource MouseOverBrush}" CornerRadius="0,0,0,0" Opacity="0"/>
                    	<Border x:Name="PressedBorder" Opacity="0" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0"/>
                    	<Border Padding="{TemplateBinding Padding}" CornerRadius="0,0,0,0" BorderThickness="1,1,1,1" x:Name="border">
                    		<Grid SnapsToDevicePixels="False" Background="Transparent">
                    			<Grid.RowDefinitions>
                    				<RowDefinition Height="19" />
                    				<RowDefinition Height="*" />
                    			</Grid.RowDefinitions>
                    			<Grid>
                    				<Grid.LayoutTransform>
                    					<TransformGroup>
                    						<TransformGroup.Children>
                    							<TransformCollection>
                    								<RotateTransform Angle="90" />
                    							</TransformCollection>
                    						</TransformGroup.Children>
                    					</TransformGroup>
                    				</Grid.LayoutTransform>
                    				<Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" Margin="0,1,0,0" />
                    				<Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" Margin="0,1,0,0" />
                    			</Grid>
                    			<ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="4,4,2,0" VerticalAlignment="Top" Grid.Row="1" RecognizesAccessKey="True">
                    				<ContentPresenter.LayoutTransform>
                    					<TransformGroup>
                    						<TransformGroup.Children>
                    							<TransformCollection>
                    								<RotateTransform Angle="90" />
                    							</TransformCollection>
                    						</TransformGroup.Children>
                    					</TransformGroup>
                    				</ContentPresenter.LayoutTransform>
                    			</ContentPresenter>
                    		</Grid>
                    	</Border>
                	</Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Visibility" TargetName="Up_Arrow" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Down_Arrow" Value="Visible" />
                        </Trigger>
                    	<Trigger Property="IsMouseOver" Value="true">
                    		<Trigger.ExitActions>
                    			<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                    		</Trigger.ExitActions>
                    		<Trigger.EnterActions>
                    			<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                    		</Trigger.EnterActions>
                    	</Trigger>
                    	<Trigger Property="IsPressed" Value="true">
                    		<Trigger.ExitActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                    		</Trigger.ExitActions>
                    		<Trigger.EnterActions>
                    			<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                    		</Trigger.EnterActions>
                    	</Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,1" CornerRadius="3">
                        <DockPanel>
                            <ToggleButton FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1,1,1,0" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" />
                            <Border Visibility="Collapsed" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,1" x:Name="border" Margin="1,-1,1,1">
                                <Border Width="Auto" Height="Auto" BorderBrush="{DynamicResource HightlightBrush}" BorderThickness="0,1,0,0">
                            		<ContentPresenter Focusable="false" x:Name="ExpandSite" DockPanel.Dock="Bottom" Width="Auto" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="1,1,1,1" />
                            	</Border>
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="border" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Down" >
                        	<Setter Property="Margin" TargetName="border" Value="1,-1,1,1"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}" />
                            <Setter Property="Margin" TargetName="border" Value="-2,0,1,0"/>
                            <Setter Property="Margin" TargetName="HeaderSite" Value="1,0,1,0"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}" />
                            <Setter Property="Margin" TargetName="border" Value="1,0,1,-2"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}" />
                            <Setter Property="Margin" TargetName="HeaderSite" Value="1,0,1,1"/>
                            <Setter Property="Margin" TargetName="border" Value="1,0,-2,1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="HoverOn">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ComboBoxToggleHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="HoverOff">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ComboBoxToggleHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="CheckedOn">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="CheckedOff">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="-90"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition Width="20"/>
			</Grid.ColumnDefinitions>
			<Border HorizontalAlignment="Stretch" Grid.ColumnSpan="2" Background="{DynamicResource NormalBrush}" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,4,4,0" x:Name="border"/>
			<Border HorizontalAlignment="Stretch" Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,4,4,0" x:Name="ComboBoxToggleHoverBorder" Grid.ColumnSpan="2" Margin="1,1,1,1" Opacity="0"/>
			<Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" RenderTransformOrigin="0.5,0.5">
				<Path.RenderTransform>
					<TransformGroup>
						<ScaleTransform ScaleX="1" ScaleY="1"/>
						<SkewTransform AngleX="0" AngleY="0"/>
						<RotateTransform Angle="-90"/>
						<TranslateTransform X="0" Y="0"/>
					</TransformGroup>
				</Path.RenderTransform>
			</Path>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource CheckedOff}" x:Name="CheckedOff_BeginStoryboard"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource CheckedOn}" x:Name="CheckedOn_BeginStoryboard"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
				<Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/>
				<Setter Property="Opacity" TargetName="Arrow" Value="0.5"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	
	<ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="HoverOn">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="HoverOff">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="FocusedOn">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="FocusedOff">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
						<Border x:Name="Border" Background="{x:Null}" BorderThickness="1" CornerRadius="0,0,0,0" BorderBrush="{DynamicResource PressedBrush}">
							
				<ScrollViewer x:Name="PART_ContentHost"   Background="{TemplateBinding Background}"/>
						
			</Border>
			<Border BorderThickness="1,1,1,1" BorderBrush="{DynamicResource GlyphBrush}" Opacity="0" x:Name="HighlightBorder" IsHitTestVisible="False"/>
			<Border BorderThickness="1,1,1,1" BorderBrush="{DynamicResource GlyphBrush}" Opacity="0" x:Name="FocusedBorder" IsHitTestVisible="False"/>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsFocused" Value="False"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<Trigger Property="IsFocused" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>


    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Template" Value="{DynamicResource NuclearComboBox}" />
    </Style>

    <ControlTemplate x:Key="NuclearComboBox"  TargetType="{x:Type ComboBox}">
        <Grid>
            <ToggleButton Grid.Column="2" Template="{DynamicResource ComboBoxToggleButton}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
            <ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

            <TextBox Visibility="Hidden" Template="{DynamicResource ComboBoxTextBox}" HorizontalAlignment="Stretch" Margin="2,2,20,2" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Stretch" Focusable="True" Background="#FFFFFFFF" IsReadOnly="{TemplateBinding IsReadOnly}"/>

            <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1">
                        <Border.Background>
                            <SolidColorBrush Color="{DynamicResource PressedColor2}"/>
                        </Border.Background>
                    </Border>
                    <ScrollViewer x:Name="DropDownScrollViewer" Margin="4,6,4,6">
                        <Grid>
                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                            </Canvas>
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ScrollViewer>

                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsGrouping" Value="true">
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style d:IsControlPart="True" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid SnapsToDevicePixels="true" Margin="1,1,1,1">
						<Border x:Name="ComboBoxItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3,3,3,3"/>
						<ContentPresenter VerticalAlignment="Center" Margin="5,2,2,2"/>
					</Grid>
					<ControlTemplate.Triggers>
					
						<Trigger Property="IsHighlighted" Value="true">
							<Setter Property="Background" Value="{DynamicResource SelectedBackgroundBrush}" TargetName="ComboBoxItemMainBorder"/>
						</Trigger>
						
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{DynamicResource ListBrush}"/>
		<Setter Property="BorderThickness" Value="0,1,0,0"/>
		<Setter Property="BorderBrush" Value="{DynamicResource HightlightBrush}"/>
	</Style>
	
<Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ValueChangedOn">
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#00000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                            	<SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#00000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="sc#0, 0, 0, 0"/>
                            	<SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
							
							<ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#00000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#00000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ValueChangedBorder_Vertical" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                            	<SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#00000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                            	<SplineColorKeyFrame KeyTime="00:00:00.9000000" Value="sc#0, 0, 0, 0"/>
                            	<SplineColorKeyFrame KeyTime="00:00:01.1000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
							
                        </Storyboard>
                        <Storyboard x:Key="IndeterminateOn">
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)" RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)" RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)" RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
							
							<ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[0].(GradientStop.Color)" RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[1].(GradientStop.Color)" RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.6000000" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="sc#1, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="sc#0, 0, 0, 0"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IndeterminateBorder_Vertical" Storyboard.TargetProperty="(UIElement.OpacityMask).(GradientBrush.GradientStops)[2].(GradientStop.Color)" RepeatBehavior="Forever">
                                <SplineColorKeyFrame KeyTime="00:00:00.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.4000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:00.8000000" Value="#FF000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.2000000" Value="#00000000"/>
                                <SplineColorKeyFrame KeyTime="00:00:01.9000000" Value="#00000000"/>
                            </ColorAnimationUsingKeyFrames>
							
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Background">
                        <Border x:Name="PART_Track" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1" CornerRadius="2">
                        	<Border.Background>
                        		<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
                        	</Border.Background>
                        </Border>
                        <Grid HorizontalAlignment="Left" x:Name="PART_Indicator">
						<Border x:Name="border"  Background="{DynamicResource SelectedBackgroundBrush}" BorderBrush="{x:Null}" CornerRadius="2" Margin="2,2,2,2" >
							<Border.LayoutTransform>
								<TransformGroup>
									<ScaleTransform/>
									<SkewTransform/>
									<RotateTransform/>
									<TranslateTransform/>
								</TransformGroup>
							</Border.LayoutTransform>
						</Border>
                        <Border CornerRadius="2,2,2,2" x:Name="ValueChangedBorder">
                                <Border.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.996,0.5" StartPoint="0.005,0.5">
                                        <GradientStop Color="#00000000" Offset="0"/>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                        <GradientStop Color="#00000000" Offset="0.48"/>
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource PressedColor2}"/>
                                </Border.Background>
                        
                        </Border>
						<Border CornerRadius="2,2,2,2" x:Name="ValueChangedBorder_Vertical" Visibility="Hidden">
                                <Border.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.5,-0.385" StartPoint="0.501,1.385">
                                        <GradientStop Color="#00000000" Offset="0"/>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                        <GradientStop Color="#00000000" Offset="0.48"/>
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource PressedColor2}"/>
                                </Border.Background>
                        
                        </Border>
						</Grid>
                        <Border x:Name="IndeterminateBorder" BorderBrush="{x:Null}" CornerRadius="2" Visibility="Visible" Margin="1,1,1,1">
                            <Border.OpacityMask>
                                <LinearGradientBrush EndPoint="0.996,0.5" StartPoint="0.005,0.5">
                                    <GradientStop Color="#00000000" Offset="0"/>
                                    <GradientStop Color="#00000000" Offset="1"/>
                                    <GradientStop Color="#00000000" Offset="0.48"/>
                                </LinearGradientBrush>
                            </Border.OpacityMask>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource PressedColor2}" Offset="0"/>
                                    <GradientStop Color="{DynamicResource HighlightColor}" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
						<Border x:Name="IndeterminateBorder_Vertical" BorderBrush="{x:Null}" CornerRadius="2" Visibility="Hidden" Margin="1,1,1,1">
                            <Border.OpacityMask>
                                <LinearGradientBrush EndPoint="0.5,-1.347" StartPoint="0.501,2.347">
                                    <GradientStop Color="#00000000" Offset="0"/>
                                    <GradientStop Color="#00000000" Offset="1"/>
                                    <GradientStop Color="#00000000" Offset="0.48"/>
                                </LinearGradientBrush>
                            </Border.OpacityMask>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource PressedColor2}" Offset="0"/>
                                    <GradientStop Color="{DynamicResource HighlightColor}" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
					<Trigger Property="Orientation" Value="Vertical">
								<Setter Property="LayoutTransform" TargetName="Background">
									<Setter.Value>
										<RotateTransform Angle="-90"/>
									</Setter.Value>
								</Setter>
								<Setter Property="LayoutTransform" TargetName="PART_Track">
									<Setter.Value>
										<RotateTransform Angle="90"/>
									</Setter.Value>
								</Setter>
								<Setter Property="LayoutTransform" TargetName="PART_Indicator">
									<Setter.Value>
										<RotateTransform Angle="90"/>
									</Setter.Value>
								</Setter>
								<Setter Property="Visibility" TargetName="IndeterminateBorder_Vertical" Value="Visible"/>
								<Setter Property="Visibility" TargetName="ValueChangedBorder_Vertical" Value="Visible"/>
								<Setter Property="Visibility" TargetName="IndeterminateBorder" Value="Hidden"/>
								<Setter Property="Visibility" TargetName="ValueChangedBorder" Value="Hidden"/>
								<Setter Property="LayoutTransform" TargetName="border">
									<Setter.Value>
										<TransformGroup>
											<ScaleTransform/>
											<SkewTransform/>
											<RotateTransform Angle="-90"/>
											<TranslateTransform/>
										</TransformGroup>
									</Setter.Value>
								</Setter>
								
							</Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="PART_Track" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_Track" Value="{DynamicResource DisabledBorderBrush}"/>
                            <Setter Property="Background" TargetName="PART_Indicator" Value="{DynamicResource DisabledBackgroundBrush}"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="RangeBase.ValueChanged">
                            <BeginStoryboard Storyboard="{StaticResource ValueChangedOn}" x:Name="ValueChangedOn_BeginStoryboard" />
                        </EventTrigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="IndeterminateOn_BeginStoryboard" Storyboard="{StaticResource IndeterminateOn}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="IndeterminateOn_BeginStoryboard" />
                            </Trigger.ExitActions>
                            <Setter Property="Visibility" TargetName="IndeterminateBorder" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	
	<Style TargetType="{x:Type TextBox}">
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Template" Value="{DynamicResource NuclearTextBox}" />
        
		
	</Style>

    <ControlTemplate x:Key="NuclearTextBox"  TargetType="{x:Type TextBox}">
    	<ControlTemplate.Resources>
    		<Storyboard x:Key="HoverOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="FocusedOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="FocusedOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    	</ControlTemplate.Resources>
        <Grid Width="Auto" Height="Auto">
    		<Border x:Name="MainBorder" Background="{DynamicResource NormalBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto"/>
    		<Border x:Name="HoverBorder" Background="{DynamicResource SelectedBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto" Opacity="0"/>
    		<Border x:Name="FocusedBorder" Background="{DynamicResource SelectedBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto" Opacity="0"/>
    		<Border Width="Auto" Height="Auto" BorderBrush="{DynamicResource PressedBrush}" BorderThickness="1" Margin="2,2,2,2" x:Name="InsideBorder">

    			<ScrollViewer x:Name="PART_ContentHost"   Background="{TemplateBinding Background}"/>

    		</Border>
    	</Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
            	<MultiTrigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
            	</MultiTrigger.ExitActions>
            	<MultiTrigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
            	</MultiTrigger.EnterActions>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsFocused" Value="True">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type PasswordBox}">
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<ControlTemplate.Resources>
    		<Storyboard x:Key="HoverOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="FocusedOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="FocusedOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    	</ControlTemplate.Resources>
        <Grid Width="Auto" Height="Auto">
    		<Border x:Name="MainBorder" Background="{DynamicResource NormalBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto"/>
    		<Border x:Name="HoverBorder" Background="{DynamicResource SelectedBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto" Opacity="0"/>
    		<Border x:Name="FocusedBorder" Background="{DynamicResource SelectedBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto" Opacity="0"/>
    		<Border Width="Auto" Height="Auto" BorderBrush="{DynamicResource PressedBrush}" BorderThickness="1" Margin="2,2,2,2" x:Name="InsideBorder">

    			<ScrollViewer x:Name="PART_ContentHost"   Background="{TemplateBinding Background}"/>

    		</Border>
    	</Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
            	<MultiTrigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
            	</MultiTrigger.ExitActions>
            	<MultiTrigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
            	</MultiTrigger.EnterActions>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsFocused" Value="False"/>
                </MultiTrigger.Conditions>
            </MultiTrigger>
            <Trigger Property="IsFocused" Value="True">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource FocusedOn}" x:Name="FocusedOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrush">
			<Setter.Value>
				<LinearGradientBrush EndPoint="0,20" StartPoint="0,0" MappingMode="Absolute">
					<GradientStop Color="#FFABADB3" Offset="0.05"/>
					<GradientStop Color="#FFE2E3EA" Offset="0.07"/>
					<GradientStop Color="{DynamicResource SelectColor1}" Offset="1"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type Label}">
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Top"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Grid>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type Menu}">
		<Setter Property="Background" Value="{DynamicResource MenuBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Menu}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Margin="5,0,5,0">
                            <Border Margin="1,0,1,0" x:Name="Border" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,3,3">
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource PressedColor2}"/>
                                </Border.Background>
                            </Border>
                            <StackPanel IsItemsHost="True" ClipToBounds="True" Orientation="Horizontal" Margin="1,0,0,0"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type ContextMenu}">
		<Setter Property="Background" Value="{DynamicResource MenuBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Grid Margin="5,0,5,0">
						<Border Margin="1,0,1,0" x:Name="Border" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,0,1,1" CornerRadius="0,0,3,3">
							<Border.Background>
								<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
							</Border.Background>
						</Border>
						<StackPanel IsItemsHost="True" ClipToBounds="True" Orientation="Vertical" Margin="1,0,0,0"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15"/>
	
	<Style TargetType="{x:Type MenuItem}">
        <Setter Property="Padding" Value="8,3,2,3" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type MenuItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="MouseOver">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MouseOverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MouseOverRectangle2" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="MouseOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MouseOverRectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" KeySpline="1,0,1,1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="MouseOverRectangle2" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="2,1,2,0">
						<Grid>
							
							<Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="IconColumn" MinWidth="26" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
								<ColumnDefinition Width="*"/>
                                <ColumnDefinition x:Name="columnDefinition" Width="37"/>
								<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
								<ColumnDefinition Width="14"/>
							</Grid.ColumnDefinitions>
							
							<Rectangle Fill="{DynamicResource SelectedBackgroundBrush}" Stroke="{DynamicResource DefaultedBorderBrush}" RadiusX="2.5" RadiusY="2.5" HorizontalAlignment="Stretch" Margin="1,1,1,1" x:Name="MouseOverRectangle" Width="Auto" Opacity="0" Grid.Column="0" Grid.ColumnSpan="5" StrokeThickness="1">
								<Rectangle.OpacityMask>
									<LinearGradientBrush EndPoint="0,0.5" StartPoint="1.00,0.5">
										<GradientStop Color="#FF000000" Offset="0"/>
										<GradientStop Color="#00FFFFFF" Offset="1"/>
									</LinearGradientBrush>
								</Rectangle.OpacityMask>
							</Rectangle>
							<Rectangle Fill="{x:Null}" StrokeThickness="1" RadiusX="2.5" RadiusY="2.5" HorizontalAlignment="Stretch" Margin="2,2,2,2" x:Name="MouseOverRectangle2" Width="Auto" Opacity="0" Grid.ColumnSpan="5">
								<Rectangle.Stroke>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="#FFF2FCF1" Offset="0"/>
										<GradientStop Color="#00F2FCF1" Offset="1"/>
									</LinearGradientBrush>
								</Rectangle.Stroke>
								<Rectangle.OpacityMask>
									<LinearGradientBrush EndPoint="0,0.5" StartPoint="1.00,0.5">
										<GradientStop Color="#FF000000" Offset="0"/>
										<GradientStop Color="#00FFFFFF" Offset="1"/>
									</LinearGradientBrush>
								</Rectangle.OpacityMask>
							</Rectangle>
							<Rectangle Stroke="{x:Null}" HorizontalAlignment="Stretch" Margin="-1,0,-1,-1" Width="Auto" Opacity="0.45" Grid.Column="0" x:Name="rectangle">
								<Rectangle.Fill>
									<LinearGradientBrush EndPoint="1,0.504" StartPoint="0.009,0.5">
										<GradientStop Color="#FF5E7570" Offset="0"/>
										<GradientStop Color="#765E7570" Offset="1"/>
									</LinearGradientBrush>
								</Rectangle.Fill>
							</Rectangle>
							
							<ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" MinWidth="16"/>
							
							<Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
								<Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
							</Grid>

                            <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" Margin="{TemplateBinding Padding}"  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <TextBlock Margin="{TemplateBinding Padding}" Grid.Column="3" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding InputGestureText}" />							
							
							<Grid Grid.Column="4" x:Name="ArrowPanel" VerticalAlignment="Center">
								<Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
							</Grid>
							
							<Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="Slide">
								<Grid x:Name="SubMenu">
									<Border x:Name="SubMenuBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
									
									<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="0,0,0,2"/>
								</Grid>
							</Popup>
							
						</Grid>
					</Border>
					
					<ControlTemplate.Triggers>
					
						<Trigger Property="Role" Value="TopLevelHeader">
							<Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="MinWidth" Value="0" TargetName="IconColumn" />
							<Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
							<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
							<Setter Property="Visibility" TargetName="rectangle" Value="Hidden"/>
                            <Setter Property="Width" TargetName="columnDefinition" Value="0"/>
						</Trigger>
						
						<Trigger Property="Role" Value="TopLevelItem">
							<Setter Property="Margin" Value="0,1,0,1"/>
                            <Setter Property="MinWidth" Value="0" TargetName="IconColumn" />
							<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
							<Setter Property="Visibility" TargetName="rectangle" Value="Hidden"/>
                            <Setter Property="Width" TargetName="columnDefinition" Value="0"/>
						</Trigger>
						
						<Trigger Property="Role" Value="SubmenuHeader">
							<Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="5,2,0,2"/>
                        </Trigger>
						
						<Trigger Property="Role" Value="SubmenuItem">
							<Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="5,2,0,2"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
						</Trigger>
						<Trigger Property="IsSuspendingPopupAnimation" Value="true">
							<Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
						</Trigger>
						
						<Trigger Property="Icon" Value="{x:Null}">
							<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
						</Trigger>
						
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
							<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
						</Trigger>
						
						<Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
							<Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu"/>
							<Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu"/>
						</Trigger>
						
						<Trigger Property="IsHighlighted" Value="true">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource MouseOut}" x:Name="MouseOut_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource MouseOver}"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type Separator}">
		<Setter Property="Height" Value="1"/>
		<Setter Property="Margin" Value="0,2,0,2"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
		<Style TargetType="{x:Type Separator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
		<Setter Property="Height" Value="1"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Margin" Value="0,0,0,0"/>
	</Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" x:Name="RowDefinition0" />
                            <RowDefinition Height="*" x:Name="RowDefinition1" />
                        </Grid.RowDefinitions>
                        <Border CornerRadius="2,2,0,0" x:Name="border" Margin="0,0,0,-4" Panel.ZIndex="100">
                        	<Border.Background>
                        		<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
                        	</Border.Background>
                    		<TabPanel x:Name="HeaderPanel" IsItemsHost="true" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1" RenderTransformOrigin="0.5,0.5" Width="Auto" Height="Auto" Margin="5,5,0,-3">
                    			<TabPanel.LayoutTransform>
                    				<TransformGroup>
                    					<ScaleTransform ScaleX="1" ScaleY="1" />
                    					<SkewTransform AngleX="0" AngleY="0" />
                    					<RotateTransform Angle="0" />
                    					<TranslateTransform X="0" Y="0" />
                    				</TransformGroup>
                    			</TabPanel.LayoutTransform>
                    			<TabPanel.RenderTransform>
                    				<TransformGroup>
                    					<ScaleTransform ScaleX="1" ScaleY="1" />
                    					<SkewTransform AngleX="0" AngleY="0" />
                    					<RotateTransform />
                    					<TranslateTransform X="0" Y="0" />
                    				</TransformGroup>
                    			</TabPanel.RenderTransform>

                    		</TabPanel>
                    	</Border>
                    	<Border Grid.Row="1" x:Name="ContentPanel" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1" CornerRadius="2" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2">
							<ContentPresenter Margin="4" x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"/>
						</Border>
                    	<Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" CornerRadius="10,0,0,0" Opacity="0.5" Margin="2,0,2,0" x:Name="border1">
                    		<Border.LayoutTransform>
                    			<TransformGroup>
                    				<ScaleTransform ScaleX="1" ScaleY="1"/>
                    				<SkewTransform AngleX="0" AngleY="0"/>
                    				<RotateTransform Angle="0"/>
                    				<TranslateTransform X="0" Y="0"/>
                    			</TransformGroup>
                    		</Border.LayoutTransform>
                    		<Border.BorderBrush>
                    			<SolidColorBrush Color="{DynamicResource BlackColor}"/>
                    		</Border.BorderBrush>
                    	</Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Grid.Row" TargetName="border" Value="1"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,2,0,0"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="0,0,2,2"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">

                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="border" Value="0"/>
                            <Setter Property="Margin" TargetName="border" Value="0,0,0,0"/>
                            <Setter Property="Margin" TargetName="ContentPanel" Value="0,0,0,0"/>
                            <Setter Property="LayoutTransform" TargetName="border1">
                            	<Setter.Value>
                            		<TransformGroup>
                            			<ScaleTransform ScaleX="1" ScaleY="1"/>
                            			<SkewTransform AngleX="0" AngleY="0"/>
                            			<RotateTransform Angle="-90"/>
                            			<TranslateTransform X="0" Y="0"/>
                            		</TransformGroup>
                            	</Setter.Value>
                            </Setter>
                            <Setter Property="Margin" TargetName="border1" Value="0,0,0,0"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="0,2,2,0"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="0,2,2,0"/>

                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Grid.Column" TargetName="border" Value="1"/>
                            <Setter Property="LayoutTransform" TargetName="border1">
                            	<Setter.Value>
                            		<TransformGroup>
                            			<ScaleTransform ScaleX="1" ScaleY="1"/>
                            			<SkewTransform AngleX="0" AngleY="0"/>
                            			<RotateTransform Angle="90"/>
                            			<TranslateTransform X="0" Y="0"/>
                            		</TransformGroup>
                            	</Setter.Value>
                            </Setter>
                            <Setter Property="Grid.Column" TargetName="border1" Value="1"/>
                            <Setter Property="CornerRadius" TargetName="ContentPanel" Value="2,0,0,2"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="0,2,2,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
    <Style d:IsControlPart="True" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                	<ControlTemplate.Resources>
                		<Storyboard x:Key="SelectedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="SelectedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
                    <Grid x:Name="grid" Margin="2,1,2,3">
                    	<Grid.LayoutTransform>
                    		<TransformGroup>
                    			<ScaleTransform ScaleX="1" ScaleY="1"/>
                    			<SkewTransform AngleX="0" AngleY="0"/>
                    			<RotateTransform Angle="0"/>
                    			<TranslateTransform X="0" Y="0"/>
                    		</TransformGroup>
                    	</Grid.LayoutTransform>
                        <Grid>
						<Border Margin="0,0,0,0" x:Name="Border" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="5,5,0,0" Opacity="0"/>
						<Border Margin="0,0,0,0" x:Name="SelectedBorder" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="5,5,0,0" Opacity="0"/>
						<Border x:Name="HoverBorder" Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="5,5,0,0" Margin="0,0,0,0" Opacity="0"/>
						<Border x:Name="SelectedHoverBorder" Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="5,5,0,0" Margin="0,0,0,0" Opacity="0"/>
						<ContentPresenter HorizontalAlignment="Center" Margin="12,4,12,4" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header" d:LayoutOverrides="Height"/>
					</Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="-90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                        <SkewTransform AngleX="0" AngleY="0" />
                                        <RotateTransform Angle="180" />
                                        <TranslateTransform X="0" Y="0" />
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="grid">
                            	<Setter.Value>
                            		<TransformGroup>
                            			<ScaleTransform ScaleX="1" ScaleY="1"/>
                            			<SkewTransform AngleX="0" AngleY="0"/>
                            			<RotateTransform Angle="180"/>
                            			<TranslateTransform X="0" Y="0"/>
                            		</TransformGroup>
                            	</Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                        	<MultiTrigger.ExitActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                        	</MultiTrigger.ExitActions>
                        	<MultiTrigger.EnterActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOn_BeginStoryboard"/>
                        	</MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="Selector.IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                        	<Trigger.ExitActions>
                        		<BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
                        	</Trigger.ExitActions>
                        	<Trigger.EnterActions>
                        		<BeginStoryboard Storyboard="{StaticResource SelectedOn}"/>
                        	</Trigger.EnterActions>
                            <Setter Property="Panel.ZIndex" Value="100" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="grid" />
                                <Condition Property="Selector.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                        	<Setter Property="Opacity" TargetName="SelectedHoverBorder" Value="1"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<Style x:Key="NuclearSliderThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Height" Value="14"/>
		<Setter Property="Width" Value="14"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverPath" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverPath" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PressedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedPath" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PressedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedPath" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Path Fill="{DynamicResource NormalBrush}" Stretch="Fill" Stroke="{DynamicResource NormalBorderBrush}" Margin="-3,2,-3,-2" Data="M0.11487651,3.9632395 L13.285057,3.9632395 6.62222,13.28542 z" x:Name="MainPath"/>
						<Path Fill="{DynamicResource MouseOverBrush}" Stretch="Fill" Stroke="{DynamicResource NormalBorderBrush}" Margin="-3,2,-3,-2" x:Name="HoverPath" Data="M0.11487651,3.9632395 L13.285057,3.9632395 6.62222,13.28542 z" Opacity="0"/>
						<Path Fill="{DynamicResource PressedBrush}" Stretch="Fill" Stroke="{DynamicResource PressedBorderBrush}" Margin="-3,2,-3,-2" x:Name="PressedPath" Data="M0.11487651,3.9632395 L13.285057,3.9632395 6.62222,13.28542 z" Opacity="0"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDragging" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="MainPath" Value="{DynamicResource DisabledBackgroundBrush}"/>
							<Setter Property="Stroke" TargetName="MainPath" Value="{DynamicResource DisabledBorderBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type Slider}">
		<Setter Property="Background">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Slider}">
					<Grid x:Name="GridRoot">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						
						<TickBar Visibility="Collapsed" x:Name="TopTick" Height="4" SnapsToDevicePixels="True" Placement="Top" Fill="{DynamicResource GlyphBrush}"/>
						<Border Grid.Row="1" Margin="0" x:Name="Border" Height="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
						
						<Track Grid.Row="1" x:Name="PART_Track">
							<Track.Thumb>
								<Thumb Style="{DynamicResource NuclearSliderThumb}"/>
							</Track.Thumb>
							<Track.IncreaseRepeatButton>
								<RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.IncreaseLarge"/>
							</Track.IncreaseRepeatButton>
							<Track.DecreaseRepeatButton>
								<RepeatButton Style="{DynamicResource NuclearScrollRepeatButtonStyle}" Command="Slider.DecreaseLarge"/>
							</Track.DecreaseRepeatButton>
						</Track>
						
						<TickBar Visibility="Collapsed" Grid.Row="2" x:Name="BottomTick" Height="4" SnapsToDevicePixels="True" Placement="Bottom" Fill="{TemplateBinding Foreground}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TickPlacement" Value="TopLeft">
							<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
						</Trigger>
						<Trigger Property="TickPlacement" Value="BottomRight">
							<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
						</Trigger>
						<Trigger Property="TickPlacement" Value="Both">
							<Setter Property="Visibility" Value="Visible" TargetName="TopTick"/>
							<Setter Property="Visibility" Value="Visible" TargetName="BottomTick"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
						</Trigger>
						
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="LayoutTransform" TargetName="GridRoot">
								<Setter.Value>
									<RotateTransform Angle="-90"/>
								</Setter.Value>
							</Setter>
							<Setter TargetName="PART_Track" Property="Orientation" Value="Horizontal"/>
						</Trigger>
						
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="{x:Type TreeView}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Grid>
						<Border x:Name="Border" Background="#FFD6DED4" BorderBrush="#FFAEBEB2" BorderThickness="1" CornerRadius="1">
							<ScrollViewer   Focusable="False" Background="{TemplateBinding Background}" Padding="4" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="False">
								<ItemsPresenter/>
							</ScrollViewer>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
	</Style>
	
	<Style x:Key="NuclearTreeViewItemToggleButton" d:IsControlPart="True" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="ExpandOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="90"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ExpandOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ExpandPath" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Width="15" Height="13" Background="Transparent">
						<Path Visibility="Collapsed" HorizontalAlignment="Left" Margin="1,1,1,1" x:Name="IsExpandedPath" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 0 4 L 8 4 L 4 8 Z"/>
						<Path HorizontalAlignment="Left" Margin="1,1,1,1" x:Name="ExpandPath" VerticalAlignment="Center" Fill="{DynamicResource GlyphBrush}" Data="M 4 0 L 8 4 L 4 8 Z" RenderTransformOrigin="0.5,0.5">
							<Path.RenderTransform>
								<TransformGroup>
									<ScaleTransform ScaleX="1" ScaleY="1"/>
									<SkewTransform AngleX="0" AngleY="0"/>
									<RotateTransform Angle="0"/>
									<TranslateTransform X="0" Y="0"/>
								</TransformGroup>
							</Path.RenderTransform>
						</Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ExpandOff}" x:Name="ExpandOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ExpandOn}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style d:IsControlPart="True" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background" Value="{DynamicResource ListBrush}"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="1,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TreeViewItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TreeViewItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TreeViewItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TreeViewItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedHoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TreeViewItemSelectedHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedHoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TreeViewItemSelectedHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19" Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<ToggleButton x:Name="Expander" Style="{DynamicResource NuclearTreeViewItemToggleButton}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
						<Border Grid.Column="1" x:Name="Selection_Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Margin="0,1,0,1" CornerRadius="3,3,3,3">
							<Grid>
								<Border x:Name="TreeViewItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="3,3,3,3"/>
								<Border x:Name="TreeViewItemSelectedBorder" Background="{DynamicResource SelectedBackgroundBrush}" CornerRadius="3,3,3,3" Margin="0,1,0,0" Opacity="0"/>
								<Border x:Name="TreeViewItemHoverBorder" Background="{DynamicResource MouseOverBrush}" CornerRadius="3,3,3,3" Margin="1,1,1,1" Opacity="0"/>
								<Border x:Name="TreeViewItemSelectedHoverBorder" Background="{DynamicResource MouseOverBrush}" CornerRadius="3,3,3,3" Opacity="0"/>
								<ContentPresenter HorizontalAlignment="Stretch" x:Name="PART_Header" ContentSource="Header" d:LayoutOverrides="Width" Margin="2,2,2,2"/>
							</Grid>
						</Border>
						<ItemsPresenter Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1" x:Name="ItemsHost"/>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedHoverOff}" x:Name="SelectedHoverOff_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedHoverOn}" x:Name="SelectedHoverOn_BeginStoryboard"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="True" SourceName="Selection_Border"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" SourceName="Selection_Border" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<Trigger Property="IsExpanded" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="ItemsHost"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Visibility" Value="Hidden" TargetName="Expander"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
							</Trigger.EnterActions>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="IsSelectionActive" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
							<Setter Property="Background" TargetName="TreeViewItemMainBorder" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrush" Value="{DynamicResource HightlightBrush}"/>
		<Setter Property="BorderThickness" Value="1,1,1,1"/>
	</Style>
	

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{x:Null}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource NuclearButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource NuclearButton}" />
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="MinHeight" Value="18"/>
        <Setter Property="MinWidth" Value="50"/>
    </Style>

    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource RadioButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource NuclearRadioButton}" />
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template" Value="{DynamicResource NuclearCheckBox}"  />
        <Setter Property="FontSize" Value="10"/>
    </Style>
    
        <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />


        <Setter Property="Template" Value="{DynamicResource NuclearComboBox}" />
        <Setter Property="FontSize" Value="10"/>
    </Style>
    
        <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />

        <Setter Property="Template" Value="{DynamicResource NuclearTextBox}" />
        <Setter Property="FontSize" Value="10"/>
    </Style>
	
	<LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">
		<GradientStop Color="#ECECEC" Offset="0"/>
		<GradientStop Color="#DDDDDD" Offset="0.5"/>
		<GradientStop Color="#A0A0A0" Offset="1"/>
	</LinearGradientBrush>
	<SolidColorBrush x:Key="ToolBarButtonHover" Color="#FFF1F1F1" />
	<SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>
	<Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border SnapsToDevicePixels="true" x:Name="Bd" CornerRadius="0,0,0,0" Background="{DynamicResource LightBrush}">
						<Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom" Width="6" Height="7">
							<Path Stroke="White" Data="M 1 1.5 L 6 1.5"/>
							<Path Stroke="{TemplateBinding Foreground}" Data="M 0 0.5 L 5 0.5"/>
							<Path Fill="White" Data="M 0.5 4 L 6.5 4 L 3.5 7 Z"/>
							<Path Fill="{TemplateBinding Foreground}" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
						</Canvas>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource MouseOverBrush}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFFDFDFD"/>
		<SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFFFFFFF"/>
	<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border SnapsToDevicePixels="True" Background="Transparent" Padding="{TemplateBinding Padding}" CornerRadius="0,0,0,0">
						<Rectangle>
							<Rectangle.Fill>
								<DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" ViewboxUnits="Absolute" Viewport="0,0,4,4" ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
											<GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Rectangle.Fill>
						</Rectangle>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Cursor" Value="SizeAll"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">
		<GradientStop Color="#ECECEC" Offset="0"/>
		<GradientStop Color="#DDDDDD" Offset="0.5"/>
		<GradientStop Color="#A0A0A0" Offset="1"/>
	</LinearGradientBrush>
	<Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border SnapsToDevicePixels="true" x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,0,3,3">
						<Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="2,7,2,2" VerticalAlignment="Bottom" Width="7" Height="6">
							<Path Stroke="White" Data="M 1.5 1 L 1.5 6"/>
							<Path Stroke="{TemplateBinding Foreground}" Data="M 0.5 0 L 0.5 5"/>
							<Path Fill="White" Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z"/>
							<Path Fill="{TemplateBinding Foreground}" Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z"/>
						</Canvas>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">
		<GradientStop Color="#FFFFFF" Offset="0"/>
		<GradientStop Color="#FFFBFF" Offset="0.5"/>
		<GradientStop Color="#F7F7F7" Offset="1"/>
	</LinearGradientBrush>
	<Style TargetType="{x:Type ToolBar}">
		<Setter Property="Background" Value="{StaticResource ToolBarHorizontalBackground}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<Grid SnapsToDevicePixels="true" Margin="3,1,1,1" x:Name="Grid">
						<Grid HorizontalAlignment="Right" x:Name="OverflowGrid">
							<ToggleButton IsEnabled="{TemplateBinding HasOverflowItems}" FocusVisualStyle="{x:Null}" x:Name="OverflowButton" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" ClickMode="Press" IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Popup Focusable="false" AllowsTransparency="true" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" StaysOpen="False" x:Name="OverflowPopup">
								<Border x:Name="Shdw">
									<Border BorderThickness="1,1,1,1" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{DynamicResource NormalBorderBrush}">
										<ToolBarOverflowPanel Focusable="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" FocusVisualStyle="{x:Null}" Margin="2" x:Name="PART_ToolBarOverflowPanel" WrapWidth="200" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
									</Border>
								</Border>
							</Popup>
						</Grid>
						<Border Margin="0,0,11,0" x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBorderBrush}">
							<Grid>
						
								<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
									<Thumb Padding="6,5,1,6" Margin="-3,-1,0,0" x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
									<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" Margin="4,0,4,0" x:Name="ToolBarHeader" VerticalAlignment="Center" ContentSource="Header"/>
									<ToolBarPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="0,1,2,2" x:Name="PART_ToolBarPanel" IsItemsHost="true" Background="{DynamicResource NormalBrush}"/>
								</DockPanel>
								<Rectangle IsHitTestVisible="False" Opacity="0.15" VerticalAlignment="Top" Height="13.995" Grid.ColumnSpan="1" Margin="0,0,2,0">
									<Rectangle.Fill>
										<SolidColorBrush Color="{DynamicResource WhiteColor}"/>
									</Rectangle.Fill>
								</Rectangle>
							</Grid>	
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsOverflowOpen" Value="true">
							<Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
						</Trigger>
						<Trigger Property="Header" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="true">
							<Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">
							<Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
							<Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true"/>
							<Setter Property="Background" TargetName="Shdw" Value="#71000000"/>
						</Trigger>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
							<Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
							<Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
							<Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
							<Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
							<Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
							<Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
							<Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
							<Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
							<Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
							<Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
							<Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
							<Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
							<Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="#FF000000"/>
	</Style> 
	
	    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="#D5DFE5" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="4" Background="{DynamicResource ControlBackgroundBrush}" CornerRadius="0,0,0,0" BorderThickness="1,1,1,1" />
                        <Border Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" BorderBrush="{DynamicResource NormalBorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding Path="ActualWidth" ElementName="Header" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0">

                                <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0">
                                </Border>
                            </Border>
                        </Border>
                        <Border Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" />
                        <Border Grid.ColumnSpan="4" Grid.RowSpan="2" Background="{DynamicResource NormalBrush}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" x:Name="Main" BorderBrush="{DynamicResource NormalBorderBrush}" >
                        	<Border Width="Auto" Height="Auto" BorderBrush="{DynamicResource HightlightBrush}" BorderThickness="0,1,0,0" CornerRadius="2,2,0,0">
                        		<Border CornerRadius="2,2,0,0" BorderBrush="{DynamicResource HightlightBrush}" BorderThickness="0,0,0,1" Width="Auto" Height="Auto" Margin="0,0,0,-2"/>
                        	</Border>
                        </Border>
                        
                        <Border x:Name="Header" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Padding="3,1,3,0">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" RecognizesAccessKey="True" Margin="0,4,0,4" />
                        </Border>
                        
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="#FF000000" />
            </Setter.Value>
        </Setter>
    </Style>
	
	    <SolidColorBrush x:Key="ListBorder" Color="#828790" />
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <DockPanel Margin="{TemplateBinding Padding}">
                            <ScrollViewer Focusable="false" DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                                <GridViewHeaderRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,0,2,0" AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" />

                            </ScrollViewer>
                            <ScrollContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ScrollContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" KeyboardNavigation.DirectionalNavigation="Local" />
                        </DockPanel>
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_HorizontalScrollBar" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0.0" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_VerticalScrollBar" Grid.Column="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0.0" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <DockPanel Grid.Column="1" Grid.Row="1" Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}" LastChildFill="false">
                            <Rectangle Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Width="1" Fill="White" DockPanel.Dock="Left" />
                            <Rectangle Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Height="1" Fill="White" DockPanel.Dock="Top" />
                        </DockPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#FF042271" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" BorderBrush="{DynamicResource NormalBorderBrush}">
                    	<Border.Background>
                    		<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
                    	</Border.Background>

                        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="{DynamicResource GlyphBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemSingleColumnStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}" />
		<Setter Property="BorderBrush" Value="{DynamicResource HightlightBrush}"/>
		<Setter Property="Background" Value="{DynamicResource ListBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
				<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedHoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedHoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
                    <Border SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" x:Name="border">

                        <Grid Margin="2,0,2,0">
                            <Border x:Name="ListItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3,3,3,3" BorderThickness="0,1,0,0"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverBorder"/>
						<Border Background="{DynamicResource SelectedBackgroundBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemSelectedBorder"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverSelectedBorder"/>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedHoverOff}" x:Name="SelectedHoverOff_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedHoverOn}" x:Name="SelectedHoverOn_BeginStoryboard"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelected" Value="True"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						
						<MultiTrigger>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOn_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOff_BeginStoryboard"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.Conditions>
								<Condition Property="Selector.IsSelected" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						
						<Trigger Property="IsSelected" Value="true">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
							</Trigger.EnterActions>
						</Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource PressedColor1}"/>
			</Setter.Value>
		</Setter>
                            <Setter Property="Opacity" TargetName="ListItemMainBorder" Value="0.6" />

                        </MultiTrigger>
                       
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
        	<Setter.Value>
        		<SolidColorBrush Color="#FF000000"/>
        	</Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style x:Key="ListViewItemGridViewStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ListViewItemFocusVisual}" />
        <Setter Property="BorderBrush" Value="{DynamicResource HightlightBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ListBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Padding" Value="5,2,5,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SelectedHoverOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" x:Name="border">

                        <Grid Margin="2,0,2,0">
                            <Border x:Name="ListItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3,3,3,3" BorderThickness="0,1,0,0"/>
                            <Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverBorder"/>
                            <Border Background="{DynamicResource SelectedBackgroundBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemSelectedBorder"/>
                            <Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverSelectedBorder"/>
                            <GridViewRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="3,3,3,3" VerticalAlignment="Stretch" />
                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedHoverOff}" x:Name="SelectedHoverOff_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedHoverOn}" x:Name="SelectedHoverOn_BeginStoryboard"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOn_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOff_BeginStoryboard"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource PressedColor1}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Opacity" TargetName="ListItemMainBorder" Value="0.6" />

                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="#FF000000"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>


    <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-8.5" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Padding" Value="0,3,0,4" />
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="#00FFFFFF">
                        <Rectangle HorizontalAlignment="Center" Width="0.5" Fill="{DynamicResource GlyphBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                	<ControlTemplate.Resources>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.15"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
                    <Grid Margin="0,1,0,1">
                        <Grid>

                             <Border x:Name="MainBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" Background="{DynamicResource PressedBrush}" />
                             <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Background="{DynamicResource MouseOverBrush}" Opacity="0" Margin="3,0,3,0" />
                             <Border x:Name="PressedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Background="#FF000000" Opacity="0" Margin="3,0,3,0" />

                            <Border BorderThickness="1,1,1,1" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}">
                                <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" Margin="2,2,2,2" />
                            </Border>
                        </Grid>
                        <Canvas>
                            <Thumb x:Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}" HorizontalAlignment="Stretch" />
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                        	<Trigger.ExitActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                        	</Trigger.ExitActions>
                        	<Trigger.EnterActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                        	</Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                        	<Trigger.ExitActions>
                        		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                        	</Trigger.ExitActions>
                        	<Trigger.EnterActions>
                        		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                        	</Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="Height" Value="Auto">
                            <Setter Property="MinHeight" Value="20" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="Role" Value="Padding">
                            <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="Floating">
                            <Setter TargetName="PART_HeaderGripper" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Background" Value="Yellow" />
                            <Setter Property="Foreground" Value="{DynamicResource MouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	   <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Margin="2" Stroke="{DynamicResource GlyphBrush}" StrokeDashArray="1 2" StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0" />
        <GradientStop Color="#EBEBEB" Offset="0.5" />
        <GradientStop Color="#DDDDDD" Offset="0.5" />
        <GradientStop Color="#CDCDCD" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />

    <Style TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True"/>
        </Style.Triggers>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="#FF000000" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.05"/>
                			</DoubleAnimationUsingKeyFrames>
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ToggleButtonMainBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ToggleButtonMainBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="CheckedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ToggleButtonCheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="CheckedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ToggleButtonCheckedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
                    <Grid>

                        <Border x:Name="ToggleButtonMainBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" />
                        <Border Margin="1,1,1,1" x:Name="ToggleButtonCheckedBorder" Opacity="0">
                        	<Border.Background>
                        		<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        			<GradientStop Color="{DynamicResource SelectColor2}" Offset="0"/>
                        			<GradientStop Color="{DynamicResource SelectColor1}" Offset="1"/>
                        		</LinearGradientBrush>
                        	</Border.Background>
                        </Border>
                        <Border Background="#FF000000" Opacity="0" Margin="1,1,1,1" x:Name="HoverBorder"/>

                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                        	</Trigger.ExitActions>
                            <Trigger.EnterActions>
                        		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                        	</Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">

                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">

                            <Trigger.ExitActions>
                        		<BeginStoryboard Storyboard="{StaticResource CheckedOff}" x:Name="CheckedOff_BeginStoryboard"/>
                        	</Trigger.ExitActions>
                            <Trigger.EnterActions>
                        		<BeginStoryboard Storyboard="{StaticResource CheckedOn}" x:Name="CheckedOn_BeginStoryboard"/>
                        	</Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                            <Setter Property="Background" TargetName="ToggleButtonMainBorder" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="ToggleButtonMainBorder" Value="{DynamicResource DisabledBorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	 <!-- Data Grid -->

    <ControlTemplate x:Key="SelectAllButtonTemplate"  TargetType="{x:Type Button}">
    	<ControlTemplate.Resources>
    		<Storyboard x:Key="HoverOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="PressedOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    	</ControlTemplate.Resources>

        <Grid x:Name="Grid">
            <Border x:Name="ButtonMainBorder" Background="{StaticResource PressedBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Border BorderThickness="0,1,0,0">
                    <Border.BorderBrush>
                        <SolidColorBrush Color="{DynamicResource HighlightColor}"/>
                    </Border.BorderBrush>
                </Border>
            </Border>
            <Border x:Name="ButtonDefaultBorder" Visibility="Hidden" BorderBrush="#FF8B9F39" BorderThickness="1,1,1,1" Margin="0,0.126,0,-0.126">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFACCA1C" Offset="0"/>
                        <GradientStop Color="#FF95B013" Offset="1"/>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <Border x:Name="ButtonHoverBorder" Margin="1,1,1,1" Background="{DynamicResource MouseOverBrush}" Opacity="0"/>
            <Border x:Name="ButtonPressedBrush" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" Opacity="0"/>

            <Polygon x:Name="Arrow" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="8,8,3,3" Fill="{DynamicResource GlyphBrush}" Stretch="Uniform" Points="0,10 10,10 10,0" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="Visibility" TargetName="ButtonDefaultBorder" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="ButtonMainBorder"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
            	<Trigger.ExitActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
            	</Trigger.ExitActions>
            	<Trigger.EnterActions>
            		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
            	</Trigger.EnterActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true"/>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="ButtonMainBorder"/>
                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="ButtonMainBorder"/>
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

<BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />

 <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<!-- DataGrid Column Header -->

    <Style  TargetType="DataGridColumnHeader">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader" >
				<ControlTemplate.Resources>
                		<Storyboard x:Key="HoverOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="HoverOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOn">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.15"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                		<Storyboard x:Key="PressedOff">
                			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                			</DoubleAnimationUsingKeyFrames>
                		</Storyboard>
                	</ControlTemplate.Resources>
				<Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
						<Border x:Name="MainBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="0,0,0,0" Background="{DynamicResource PressedBrush}" Grid.ColumnSpan="2"/>
                             <Border x:Name="HoverBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Background="{DynamicResource MouseOverBrush}" Opacity="0" Margin="3,2,3,2" Grid.ColumnSpan="2"/>
                             <Border x:Name="PressedBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Background="#FF000000" Opacity="0" Margin="3,2,3,2" Grid.ColumnSpan="2"/>
						<Border x:Name="border" Grid.ColumnSpan="2" BorderThickness="0,0,1,0" BorderBrush="#FF000000"/>
					<ContentPresenter Margin="6,3,6,3" VerticalAlignment="Center" />
					<Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill" 
						Grid.Column="1" Width="8" Height="6" Fill="{DynamicResource GlyphBrush}" Margin="0,0,8,0" 
						VerticalAlignment="Center" RenderTransformOrigin="0.5,0.4" />
					<Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" 
						Style="{StaticResource ColumnHeaderGripperStyle}"/>
					<Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" 
						Style="{StaticResource ColumnHeaderGripperStyle}"/>
				</Grid>
				<ControlTemplate.Triggers>
                		<Trigger Property="IsPressed" Value="True">
                			<Trigger.ExitActions>
                				<BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
                			</Trigger.ExitActions>
                			<Trigger.EnterActions>
                				<BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
                			</Trigger.EnterActions>
                		</Trigger>
                		<Trigger Property="SortDirection" Value="{x:Null}"/>
                		<MultiTrigger>
                			<MultiTrigger.Conditions>
                				<Condition Property="IsMouseOver" Value="True" />
                				<Condition Property="SortDirection" Value="{x:Null}" />
                			</MultiTrigger.Conditions>
                			<MultiTrigger.ExitActions>
                				<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                			</MultiTrigger.ExitActions>
                			<MultiTrigger.EnterActions>
                				<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                			</MultiTrigger.EnterActions>
                            
                		</MultiTrigger>

                		<Trigger Property="SortDirection" Value="Ascending">
                			<Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                			<Setter TargetName="SortArrow" Property="RenderTransform">
                				<Setter.Value>
                					<RotateTransform Angle="180" />
                				</Setter.Value>
                			</Setter>
                			<Setter Property="Background" TargetName="border" Value="{DynamicResource MouseOverBrush}"/>
                			<Setter Property="Opacity" TargetName="border" Value="0.45"/>
                		</Trigger>
                		<Trigger Property="SortDirection" Value="Descending">
                			<Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
                			<Setter Property="Background" TargetName="border" Value="{DynamicResource MouseOverBrush}"/>
                			<Setter Property="Opacity" TargetName="border" Value="0.45"/>
                		</Trigger>
                		<Trigger Property="DisplayIndex" Value="0">
                			<Setter Property="Visibility" Value="Collapsed" 
                				TargetName="PART_LeftHeaderGripper"/>
                		</Trigger>
                	</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
    </Style>
	
	<!-- DataGrid Row Style -->
	
	    <Style  TargetType="DataGridRow">
		<Style.Triggers>
			<Trigger Property="IsSelected" Value="True" >
				<Setter Property="Foreground" Value="Blue" />
			</Trigger>
		</Style.Triggers>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
				<Setter Property="BorderBrush" Value="{DynamicResource HightlightBrush}"/>
		<Setter Property="Background" Value="{DynamicResource ListBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridRow">
				<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
				<Grid>
				<Border x:Name="ListItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3,3,3,3"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverBorder"/>
						<Border Background="{DynamicResource SelectedBackgroundBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemSelectedBorder"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverSelectedBorder"/>
				<Border x:Name="DGR_Border"  SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <ContentControl Grid.Column="1" Grid.Row="1" Foreground="White">
                                    <DataGridDetailsPresenter SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding
                    RelativeSource={RelativeSource AncestorType={x:Type DataGrid}},
                    Path=AreRowDetailsFrozen,
                    Converter={x:Static DataGrid.RowDetailsScrollingConverter},
                    ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}}" Visibility="{TemplateBinding DetailsVisibility}" />
                                </ContentControl>
                                <DataGridRowHeader x:Name="RowHeader" Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        </SelectiveScrollingGrid>
                    </Border>
					</Grid>
                    <ControlTemplate.Triggers>
                		<Trigger Property="IsMouseOver" Value="True">
                			<Trigger.ExitActions>
                				<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                			</Trigger.ExitActions>
                			<Trigger.EnterActions>
                				<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                			</Trigger.EnterActions>
                		</Trigger>
                		<Trigger Property="Validation.HasError" Value="True" >
                			<Setter Property="BorderThickness" Value="3" /> 
                			<Setter Property="BorderBrush" Value="Red" /> 
                			<Setter Property="Foreground" Value="Blue" />
                			<Setter Property="FontSize" Value="16" />

                			<Setter Property="Background" TargetName="RowHeader" Value="Red" />
                		</Trigger>

                		<Trigger Property="IsSelected" Value="True">
                			<Trigger.ExitActions>
                				<BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                			</Trigger.ExitActions>
                			<Trigger.EnterActions>
                				<BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
                			</Trigger.EnterActions>
                		</Trigger>
               	</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		</Style>

<!-- DataGrid Cell Style -->

    <Style TargetType="DataGridCell">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
				<Grid>
                    <Border x:Name="border" Background="{DynamicResource NormalBrush}" 
                  BorderBrush="{TemplateBinding BorderBrush}"  
                  BorderThickness="0" 
                  SnapsToDevicePixels="True" Opacity="0" />
                        
                    
					<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Grid>
                	<ControlTemplate.Triggers>
                		<Trigger Property="IsFocused" Value="True">
                			<Setter Property="Opacity" TargetName="border" Value="0.65"/>
                		</Trigger>
                	</ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	    <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="8"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
                  Background="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
    <!-- DataGrid Row Header -->

    <Style TargetType="DataGridRowHeader">
    	<Setter Property="MinWidth" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridRowHeader">
                	<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
                    <Grid>
                    	<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverBorder"/>
						<Border Background="{DynamicResource SelectedBackgroundBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemSelectedBorder"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" CornerRadius="3,3,3,3" Opacity="0" x:Name="ListItemHoverSelectedBorder"/>
                        <themes:DataGridHeaderBorder 
						Background="{TemplateBinding Background}" BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, 
                                    Path=HorizontalGridLinesBrush}"                                     
                                 BorderThickness="0,1,0,0" Margin="0,-1,0,0" Padding="{TemplateBinding Padding}" IsHovered="{TemplateBinding IsMouseOver}"
								  IsPressed="{TemplateBinding IsPressed}" IsSelected="{TemplateBinding IsRowSelected}" 
								  Orientation="Horizontal" SeparatorBrush="{TemplateBinding SeparatorBrush}" 
								  SeparatorVisibility="{TemplateBinding SeparatorVisibility}" >
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                <Control Template="{Binding Path=ValidationErrorTemplate, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType=DataGridRow}}" SnapsToDevicePixels="False">
                                    <Control.Visibility>
                                        <Binding Path="(Validation.HasError)" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType=DataGridRow}">
                                            <Binding.Converter>
                                                <BooleanToVisibilityConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </Control.Visibility>
                                </Control>
                            </StackPanel>
                        </themes:DataGridHeaderBorder>
                        <Thumb x:Name="PART_TopHeaderGripper" VerticalAlignment="Top">
                            <Thumb.Style>
                                <Style TargetType="{x:Type Thumb}">
                                    <Setter Property="Height" Value="8" />
                                    <Setter Property="Background" Value="#00FFFFFF" />
                                    <Setter Property="Cursor" Value="SizeNS" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                        <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom">
                            <Thumb.Style>
                                <Style TargetType="{x:Type Thumb}">
                                    <Setter Property="Height" Value="8" />
                                    <Setter Property="Background" Value="#00FFFFFF" />
                                    <Setter Property="Cursor" Value="SizeNS" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Thumb}">
                                                <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                    </Grid>
					<ControlTemplate.Triggers>
                		<Trigger Property="IsMouseOver" Value="True">
                			<Trigger.ExitActions>
                				<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
                			</Trigger.ExitActions>
                			<Trigger.EnterActions>
                				<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                			</Trigger.EnterActions>
                		</Trigger>

                		<Trigger Property="IsRowSelected" Value="True">
                			<Trigger.ExitActions>
                				<BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
                			</Trigger.ExitActions>
                			<Trigger.EnterActions>
                				<BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
                			</Trigger.EnterActions>
                		</Trigger>
               	</ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGridRowHeaderBackgroundStyle" TargetType="DataGridRowHeader">
        <Setter Property="Background" Value="Gray" />
    </Style>
	
	<!-- Calendar Controls -->
	
		 <Style TargetType="CalendarItem">
	 	<Setter Property="Background" Value="{DynamicResource LightBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
	 	<Setter Property="Margin" Value="0,3,0,3"/>
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="CalendarItem">
	 				<ControlTemplate.Resources>
	 					<DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
	 						<TextBlock HorizontalAlignment="Center" Margin="0,6,0,6" VerticalAlignment="Center" FontFamily="Verdana" FontSize="9.5" FontWeight="Bold" Foreground="#FF333333" Text="{Binding}"/>
	 					</DataTemplate>
	 				</ControlTemplate.Resources>
	 				<Grid x:Name="PART_Root">
	 					<Grid.Resources>
	 						<SolidColorBrush x:Key="DisabledColor" Color="#A5FFFFFF"/>
	 					</Grid.Resources>
	 					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1,1,1,1">
						<Border.Background>
							<SolidColorBrush Color="{DynamicResource PressedColor2}" />
						</Border.Background>
	 						<Border CornerRadius="1,1,1,1">
	 							<Grid>
	 								<Grid.Resources>
	 									<ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
	 										<Grid Cursor="Hand">
	 											<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" x:Name="buttonContent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="#FF333333" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
											</Grid>
	 									</ControlTemplate>
	 									<ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
	 										<Grid Cursor="Hand">
	 											<Rectangle Fill="#11E5EBF1" Stretch="Fill" Opacity="1"/>
	 											<Grid>
	 												<Path Fill="#FF333333" Stretch="Fill" HorizontalAlignment="Right" Margin="0,-6,14,0" VerticalAlignment="Center" Width="6" Height="10" Data="M282.875,231.875L282.875,240.375 288.625,236z"/>
	 											</Grid>
	 										</Grid>
	 									</ControlTemplate>
	 									<ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
	 										<Grid Cursor="Hand">
	 											<Rectangle Fill="#11E5EBF1" Stretch="Fill" Opacity="1"/>
	 											<Grid>
	 												<Path Fill="#FF333333" Stretch="Fill" HorizontalAlignment="Left" Margin="14,-6,0,0" VerticalAlignment="Center" Width="6" Height="10" Data="M288.75,232.25L288.75,240.625 283,236.625z"/>
	 											</Grid>
	 										</Grid>
	 									</ControlTemplate>
	 								</Grid.Resources>
	 								<Grid.ColumnDefinitions>
	 									<ColumnDefinition Width="Auto"/>
	 									<ColumnDefinition Width="Auto"/>
	 									<ColumnDefinition Width="Auto"/>
	 								</Grid.ColumnDefinitions>
	 								<Grid.RowDefinitions>
	 									<RowDefinition Height="Auto"/>
	 									<RowDefinition Height="*"/>
	 								</Grid.RowDefinitions>
	 								<Button HorizontalAlignment="Left" x:Name="PART_PreviousButton" Width="28" Height="20" Focusable="False" Grid.Column="0" Grid.Row="0">
	 									<Button.Template>
	 										<ControlTemplate TargetType="{x:Type Button}">
											<ControlTemplate.Resources>
									    		<Storyboard x:Key="HoverOn">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="HoverOff">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="PressedOn">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="PressedOff">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    	</ControlTemplate.Resources>
	 											<Grid Cursor="Hand">
													<Border x:Name="BdrPrevious" Background="{DynamicResource NormalBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" />
	 												<Border x:Name="ButtonHoverBorder" Margin="1,1,1,1" Background="{DynamicResource MouseOverBrush}" Opacity="0"/>
            										<Border x:Name="ButtonPressedBrush" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" Opacity="0"/>
													<Grid>
	 													<Path Fill="{DynamicResource GlyphBrush}" Stretch="Fill" HorizontalAlignment="Center"  VerticalAlignment="Center" Width="6" Height="10" Data="M288.75,232.25L288.75,240.625 283,236.625z"/>
	 												</Grid>
	 											</Grid>
												<ControlTemplate.Triggers>
													<Trigger Property="IsMouseOver" Value="true">
										            	<Trigger.ExitActions>
										            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
										            	</Trigger.ExitActions>
										            	<Trigger.EnterActions>
										            		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
										            	</Trigger.EnterActions>
										            </Trigger>
										            <Trigger Property="IsPressed" Value="true">
										            	<Trigger.ExitActions>
										            		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
										            	</Trigger.ExitActions>
										            	<Trigger.EnterActions>
										            		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
										            	</Trigger.EnterActions>
										            </Trigger>
												</ControlTemplate.Triggers>
	 										</ControlTemplate>
	 									</Button.Template>
	 								</Button>
	 								<Button HorizontalAlignment="Center" x:Name="PART_HeaderButton" VerticalAlignment="Center" FontSize="10.5" FontWeight="Bold" Focusable="False" Grid.Column="1" Grid.Row="0">
	 									<Button.Template>
	 										<ControlTemplate TargetType="{x:Type Button}">
											<ControlTemplate.Resources>
									    		<Storyboard x:Key="HoverOn">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="HoverOff">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="PressedOn">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="PressedOff">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    	</ControlTemplate.Resources>
	 											<Grid Cursor="Hand">
												<Border x:Name="BdrHeader" Background="{DynamicResource NormalBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" />
												<Border x:Name="ButtonHoverBorder" Margin="1,1,1,1" Background="{DynamicResource MouseOverBrush}" Opacity="0"/>
            									<Border x:Name="ButtonPressedBrush" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" Opacity="0"/>
	 												<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="14,4,14,4" x:Name="buttonContent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="#FF333333" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
	 											</Grid>
												<ControlTemplate.Triggers>
													<Trigger Property="IsMouseOver" Value="true">
										            	<Trigger.ExitActions>
										            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
										            	</Trigger.ExitActions>
										            	<Trigger.EnterActions>
										            		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
										            	</Trigger.EnterActions>
										            </Trigger>
										            <Trigger Property="IsPressed" Value="true">
										            	<Trigger.ExitActions>
										            		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
										            	</Trigger.ExitActions>
										            	<Trigger.EnterActions>
										            		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
										            	</Trigger.EnterActions>
										            </Trigger>
												</ControlTemplate.Triggers>
	 										</ControlTemplate>
	 									</Button.Template>
	 								</Button>
	 								<Button HorizontalAlignment="Right" x:Name="PART_NextButton" Width="28" Height="20" Focusable="False" Grid.Column="2" Grid.Row="0">
	 									<Button.Template>
	 										<ControlTemplate TargetType="{x:Type Button}">
											<ControlTemplate.Resources>
									    		<Storyboard x:Key="HoverOn">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="HoverOff">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="PressedOn">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    		<Storyboard x:Key="PressedOff">
									    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ButtonPressedBrush" Storyboard.TargetProperty="(UIElement.Opacity)">
									    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									    			</DoubleAnimationUsingKeyFrames>
									    		</Storyboard>
									    	</ControlTemplate.Resources>
	 											<Grid Cursor="Hand">
													<Border x:Name="BdrRight" Background="{DynamicResource NormalBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" />
													<Border x:Name="ButtonHoverBorder" Margin="1,1,1,1" Background="{DynamicResource MouseOverBrush}" Opacity="0"/>
            										<Border x:Name="ButtonPressedBrush" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,1,1,1" Opacity="0"/>
	 												<Grid>
	 													<Path Fill="{DynamicResource GlyphBrush}" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center" Width="6" Height="10" Data="M282.875,231.875L282.875,240.375 288.625,236z"/>
	 												</Grid>
	 											</Grid>
												<ControlTemplate.Triggers>
													<Trigger Property="IsMouseOver" Value="true">
										            	<Trigger.ExitActions>
										            		<BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
										            	</Trigger.ExitActions>
										            	<Trigger.EnterActions>
										            		<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
										            	</Trigger.EnterActions>
										            </Trigger>
										            <Trigger Property="IsPressed" Value="true">
										            	<Trigger.ExitActions>
										            		<BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
										            	</Trigger.ExitActions>
										            	<Trigger.EnterActions>
										            		<BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
										            	</Trigger.EnterActions>
										            </Trigger>
												</ControlTemplate.Triggers>
	 										</ControlTemplate>
	 									</Button.Template>
	 								</Button>
	 								<Grid Margin="6,-1,6,6" x:Name="PART_MonthView" Visibility="Visible" Grid.ColumnSpan="3" Grid.Row="1">
	 									<Grid.ColumnDefinitions>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 									</Grid.ColumnDefinitions>
	 									<Grid.RowDefinitions>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 									</Grid.RowDefinitions>
	 								</Grid>
	 								<Grid Margin="6,3,7,6" x:Name="PART_YearView" Visibility="Hidden" Grid.ColumnSpan="3" Grid.Row="1">
	 									<Grid.ColumnDefinitions>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="Auto"/>
	 									</Grid.ColumnDefinitions>
	 									<Grid.RowDefinitions>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="Auto"/>
	 									</Grid.RowDefinitions>
	 								</Grid>
	 							</Grid>
	 						</Border>
	 					</Border>
	 					<Rectangle Fill="#A5FFFFFF" Stretch="Fill" Stroke="#A5FFFFFF" StrokeThickness="1" RadiusX="2" RadiusY="2" x:Name="PART_DisabledVisual" Opacity="0" Visibility="Collapsed"/>
	 				</Grid>
	 				<ControlTemplate.Triggers>
	 					<Trigger Property="IsEnabled" Value="False">
	 						<Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible"/>
	 					</Trigger>
	 					<DataTrigger Binding="{Binding Path=DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType=Calendar}}" Value="Year">
	 						<Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
	 						<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
	 					</DataTrigger>
	 					<DataTrigger Binding="{Binding Path=DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType=Calendar}}" Value="Decade">
	 						<Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
	 						<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
	 					</DataTrigger>
	 				</ControlTemplate.Triggers>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 </Style>
	 
	 	 <Style x:Key="NuclearCalendarButton" TargetType="CalendarButton">
	 	<Setter Property="Background" Value="{DynamicResource ListBrush}" />
	 	<Setter Property="MinWidth" Value="40"/>
	 	<Setter Property="MinHeight" Value="42"/>
	 	<Setter Property="FontSize" Value="10"/>
	 	<Setter Property="HorizontalContentAlignment" Value="Center"/>
	 	<Setter Property="VerticalContentAlignment" Value="Center"/>
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="CalendarButton">
				<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
	 				<Grid>
	 					<Border x:Name="ListItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0.5"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" Opacity="0" x:Name="ListItemHoverBorder"/>
						<Border Background="{DynamicResource NormalBrush}" Margin="1,1,1,1" Opacity="0" x:Name="TodayBorder"/>
						<Border Background="{DynamicResource SelectedBackgroundBrush}" Margin="1,1,1,1" Opacity="0" x:Name="ListItemSelectedBorder"/>
	 					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,0,1,1" x:Name="NormalText" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="#FF333333" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
	 				</Grid>
	 				<ControlTemplate.Triggers>
	 					<Trigger Property="IsMouseOver" Value="True">
	 						<Trigger.ExitActions>
	 							<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
	 						</Trigger.ExitActions>
	 						<Trigger.EnterActions>
	 							<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
	 						</Trigger.EnterActions>
	 						
	 					</Trigger>
	 					<Trigger Property="IsFocused" Value="True">
	 						<Trigger.ExitActions>
	 							<BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
	 						</Trigger.ExitActions>
	 						<Trigger.EnterActions>
	 							<BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
	 						</Trigger.EnterActions>
	 						
	 					</Trigger>
	 				</ControlTemplate.Triggers>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
	 	<Setter Property="BorderThickness" Value="1,1,1,1"/>
	 </Style>
	 
	 <Style x:Key="NuclearCalendarDayButton" TargetType="CalendarDayButton">
		<Setter Property="Background" Value="{DynamicResource ListBrush}" />
	 	<Setter Property="MinWidth" Value="5"/>
	 	<Setter Property="MinHeight" Value="5"/>
	 	<Setter Property="FontSize" Value="10"/>
	 	<Setter Property="HorizontalContentAlignment" Value="Center"/>
	 	<Setter Property="VerticalContentAlignment" Value="Center"/>
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="CalendarDayButton">
				<ControlTemplate.Resources>
						<Storyboard x:Key="HoverOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemHoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SelectedOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ListItemSelectedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
	 				<Grid>
	 					<Border x:Name="ListItemMainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0.5"/>
						<Border Background="{DynamicResource MouseOverBrush}" Margin="1,1,1,1" Opacity="0" x:Name="ListItemHoverBorder"/>
						<Border Background="{DynamicResource NormalBrush}" Margin="1,1,1,1" Opacity="0" x:Name="TodayBorder"/>
						<Border Background="{DynamicResource SelectedBackgroundBrush}" Margin="1,1,1,1" Opacity="0" x:Name="ListItemSelectedBorder"/>
	 					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,1,5,1" x:Name="NormalText" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="#FF333333" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
	 					<Path Fill="#FF000000" Stretch="Fill" HorizontalAlignment="Stretch" Margin="3,3,3,3" x:Name="Blackout" VerticalAlignment="Stretch" Opacity="0" RenderTransformOrigin="0.5,0.5" Data="M8.1772461,11.029181L10.433105,11.029181 11.700684,12.801641 12.973633,11.029181 15.191895,11.029181 12.844727,13.999395 15.21875,17.060919 12.962891,17.060919 11.673828,15.256231 10.352539,17.060919 8.1396484,17.060919 10.519043,14.042364z"/>
	 					<Rectangle Stroke="#FF45D6FA" RadiusX="1" RadiusY="1" x:Name="DayButtonFocusVisual" IsHitTestVisible="False" Visibility="Collapsed"/>
	 				</Grid>
	 				<ControlTemplate.Triggers>
	 					<Trigger Property="IsMouseOver" Value="True">
	 						<Trigger.ExitActions>
	 							<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
	 						</Trigger.ExitActions>
	 						<Trigger.EnterActions>
	 							<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
	 						</Trigger.EnterActions>
	 						
	 					</Trigger>
	 					<Trigger Property="IsSelected" Value="True">
	 						<Trigger.ExitActions>
	 							<BeginStoryboard x:Name="SelectedOff_BeginStoryboard" Storyboard="{StaticResource SelectedOff}"/>
	 						</Trigger.ExitActions>
	 						<Trigger.EnterActions>
	 							<BeginStoryboard x:Name="SelectedOn_BeginStoryboard" Storyboard="{StaticResource SelectedOn}"/>
	 						</Trigger.EnterActions>
	 						
	 					</Trigger>
	 					<Trigger Property="IsToday" Value="True">
	 						<Setter Property="Opacity" TargetName="TodayBorder" Value="1"/>
	 						
	 					</Trigger>
	 				</ControlTemplate.Triggers>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
	 	<Setter Property="BorderThickness" Value="1,1,1,1"/>
	 </Style>
	
	<Style x:Key="NuclearCalendar" TargetType="Calendar">
	 	<Setter Property="Foreground" Value="#FF333333"/>
	 		<Setter Property="CalendarButtonStyle" Value="{DynamicResource NuclearCalendarButton}" />
		 <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource NuclearCalendarDayButton}" />
	 	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
	 	<Setter Property="BorderThickness" Value="1,1,1,1"/>
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="Calendar">
	 				<StackPanel HorizontalAlignment="Center" x:Name="PART_Root" Background="{x:Null}">
	 					<CalendarItem x:Name="PART_CalendarItem"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
	 				</StackPanel>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 </Style>
	
	 <Style TargetType="Calendar">
	 	<Setter Property="Foreground" Value="#FF333333"/>
	 		<Setter Property="CalendarButtonStyle" Value="{DynamicResource NuclearCalendarButton}" />
		 <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource NuclearCalendarDayButton}" />
	 	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
	 	<Setter Property="BorderThickness" Value="1,1,1,1"/>
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="Calendar">
	 				<StackPanel HorizontalAlignment="Center" x:Name="PART_Root" Background="{x:Null}">
	 					<CalendarItem x:Name="PART_CalendarItem"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
	 				</StackPanel>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 </Style>
	 

	 

	 <Style TargetType="DatePicker">
	 	<Setter Property="Foreground" Value="#FF333333"/>
		<Setter Property="CalendarStyle" Value="{DynamicResource NuclearCalendar}" />
	 	<Setter Property="IsTodayHighlighted" Value="True"/>
	 	<Setter Property="SelectedDateFormat" Value="Short"/>
	 	<Setter Property="Background">
	 		<Setter.Value>
	 			<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
	 		</Setter.Value>
	 	</Setter>
	 	<Setter Property="Padding" Value="2,2,2,2"/>
	 	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
	 	<Setter Property="BorderThickness" Value="1,1,1,1"/>
	 	<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="DatePicker">
	 				<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
	 					<Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="PART_Root" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
	 						<Grid.Resources>
	 							<ControlTemplate x:Key="DropDownButtonTemplate" TargetType="{x:Type Button}">
	 								<Grid>
	 									<Grid FlowDirection="LeftToRight" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center" Width="19" Height="18" Background="#11FFFFFF">
	 										<Grid.ColumnDefinitions>
	 											<ColumnDefinition Width="20*"/>
	 											<ColumnDefinition Width="20*"/>
	 											<ColumnDefinition Width="20*"/>
	 											<ColumnDefinition Width="20*"/>
	 										</Grid.ColumnDefinitions>
	 										<Grid.RowDefinitions>
	 											<RowDefinition Height="23*"/>
	 											<RowDefinition Height="19*"/>
	 											<RowDefinition Height="19*"/>
	 											<RowDefinition Height="19*"/>
	 										</Grid.RowDefinitions>
	 										<Border Margin="-1,-1,-1,-1" x:Name="Highlight" Opacity="0" Grid.ColumnSpan="4" Grid.Row="0" Grid.RowSpan="4" BorderBrush="#FF45D6FA" BorderThickness="1,1,1,1" CornerRadius="0,0,1,1"/>
	 										<Border Margin="0,-1,0,0" x:Name="Background" Opacity="1" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Background="#FF1F3B53" BorderBrush="#FFFFFFFF" BorderThickness="1,1,1,1" CornerRadius="0.5,0.5,0.5,0.5"/>
	 										<Border Margin="0,-1,0,0" x:Name="BackgroundGradient" Opacity="1" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" BorderBrush="#BF000000" BorderThickness="1,1,1,1" CornerRadius="0.5,0.5,0.5,0.5">
	 											<Border.Background>
	 												<LinearGradientBrush EndPoint="0.7,1" StartPoint="0.7,0">
	 													<GradientStop Color="#FFFFFFFF" Offset="0"/>
	 													<GradientStop Color="#F9FFFFFF" Offset="0.375"/>
	 													<GradientStop Color="#E5FFFFFF" Offset="0.625"/>
	 													<GradientStop Color="#C6FFFFFF" Offset="1"/>
	 												</LinearGradientBrush>
	 											</Border.Background>
	 										</Border>
	 										<Rectangle StrokeThickness="1" Grid.ColumnSpan="4" Grid.RowSpan="1">
	 											<Rectangle.Fill>
	 												<LinearGradientBrush EndPoint="0.3,-1.1" StartPoint="0.46,1.6">
	 													<GradientStop Color="#FF4084BD"/>
	 													<GradientStop Color="#FFAFCFEA" Offset="1"/>
	 												</LinearGradientBrush>
	 											</Rectangle.Fill>
	 											<Rectangle.Stroke>
	 												<LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
	 													<GradientStop Color="#FF494949"/>
	 													<GradientStop Color="#FF9F9F9F" Offset="1"/>
	 												</LinearGradientBrush>
	 											</Rectangle.Stroke>
	 										</Rectangle>
	 										<Path Fill="#FF2F2F2F" Stretch="Fill" HorizontalAlignment="Center" Margin="4,3,4,3" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Data="M11.426758,8.4305077L11.749023,8.4305077 11.749023,16.331387 10.674805,16.331387 10.674805,10.299648 9.0742188,11.298672 9.0742188,10.294277C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077z M14.65086,8.4305077L18.566387,8.4305077 18.566387,9.3435936 15.671368,9.3435936 15.671368,11.255703C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 15.560365,16.438808 14.951641,16.234707 14.468243,15.826504L14.881817,14.929531C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 15.83071,11.873379 15.399232,12.079271 15.016094,12.491055L14.65086,12.238613z"/>
	 										<Ellipse Fill="#FFFFFFFF" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="3" Height="3" Grid.ColumnSpan="4"/>
	 										<Border x:Name="DisabledVisual" Opacity="0" Grid.ColumnSpan="4" Grid.Row="0" Grid.RowSpan="4" BorderBrush="#B2FFFFFF" BorderThickness="1,1,1,1" CornerRadius="0,0,0.5,0.5"/>
	 									</Grid>
	 								</Grid>
	 							</ControlTemplate>
	 							<SolidColorBrush x:Key="DisabledBrush" Color="#A5FFFFFF"/>
	 						</Grid.Resources>
	 						<Grid.ColumnDefinitions>
	 							<ColumnDefinition Width="*"/>
	 							<ColumnDefinition Width="Auto"/>
	 						</Grid.ColumnDefinitions>
	 						<Button HorizontalAlignment="Left" Margin="3,0,3,0" x:Name="PART_Button" VerticalAlignment="Center" Width="20" Foreground="{TemplateBinding Foreground}" Focusable="False" Grid.Column="1" Grid.Row="0">
	 							<Button.Template>
	 								<ControlTemplate TargetType="{x:Type Button}">
	 									<ControlTemplate.Resources>
	 										<Storyboard x:Key="HoverOn">
	 											<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
	 												<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
	 											</DoubleAnimationUsingKeyFrames>
	 										</Storyboard>
	 										<Storyboard x:Key="HoverOff">
	 											<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
	 												<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
	 											</DoubleAnimationUsingKeyFrames>
	 										</Storyboard>
	 										<Storyboard x:Key="PressedOn">
	 											<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
	 												<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
	 											</DoubleAnimationUsingKeyFrames>
	 										</Storyboard>
	 										<Storyboard x:Key="PressedOff">
	 											<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PressedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
	 												<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
	 											</DoubleAnimationUsingKeyFrames>
	 										</Storyboard>
	 									</ControlTemplate.Resources>
	 									<Grid>
	 										<Grid FlowDirection="LeftToRight" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center" Width="19" Height="18" Background="#11FFFFFF">
	 											<Grid.ColumnDefinitions>
	 												<ColumnDefinition Width="20*"/>
	 												<ColumnDefinition Width="20*"/>
	 												<ColumnDefinition Width="20*"/>
	 												<ColumnDefinition Width="20*"/>
	 											</Grid.ColumnDefinitions>
	 											<Grid.RowDefinitions>
	 												<RowDefinition Height="23*"/>
	 												<RowDefinition Height="19*"/>
	 												<RowDefinition Height="19*"/>
	 												<RowDefinition Height="19*"/>
	 											</Grid.RowDefinitions>
	 											<Rectangle StrokeThickness="1" Grid.ColumnSpan="4" Grid.RowSpan="1" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
	 											<Border x:Name="MainBorder" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,0,1,1" Grid.ColumnSpan="4" Grid.RowSpan="4" Background="{DynamicResource NormalBrush}" Margin="0,5,0,0"/>
	 											<Border x:Name="HoverBorder" Margin="0,-0.175,0,0" Background="{DynamicResource MouseOverBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="1,0,1,1" Grid.ColumnSpan="4" Grid.RowSpan="3" Grid.Row="1" Opacity="0"/>
	 											<Border x:Name="PressedBorder" Margin="0,-0.175,0,0" Background="{DynamicResource PressedBrush}" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="1,0,1,1" Grid.ColumnSpan="4" Grid.RowSpan="3" Opacity="0" Grid.Row="1"/>
	 											<Path Fill="{DynamicResource GlyphBrush}" Stretch="Fill" HorizontalAlignment="Center" Margin="4,3,4,3" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="0" Grid.ColumnSpan="4" Grid.Row="1" Grid.RowSpan="3" Data="M11.426758,8.4305077L11.749023,8.4305077 11.749023,16.331387 10.674805,16.331387 10.674805,10.299648 9.0742188,11.298672 9.0742188,10.294277C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077z M14.65086,8.4305077L18.566387,8.4305077 18.566387,9.3435936 15.671368,9.3435936 15.671368,11.255703C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 15.560365,16.438808 14.951641,16.234707 14.468243,15.826504L14.881817,14.929531C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 15.83071,11.873379 15.399232,12.079271 15.016094,12.491055L14.65086,12.238613z"/>
	 											<Ellipse Fill="#FFFFFFFF" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="3" Height="3" Grid.ColumnSpan="4"/>
	 											<Border x:Name="DisabledVisual" Opacity="0" Grid.ColumnSpan="4" Grid.Row="0" Grid.RowSpan="4" BorderBrush="#B2FFFFFF" BorderThickness="1,1,1,1" CornerRadius="0,0,0.5,0.5"/>
	 										</Grid>
	 									</Grid>
	 									<ControlTemplate.Triggers>
	 										<Trigger Property="IsPressed" Value="True">
	 											<Trigger.ExitActions>
	 												<BeginStoryboard x:Name="PressedOff_BeginStoryboard" Storyboard="{StaticResource PressedOff}"/>
	 											</Trigger.ExitActions>
	 											<Trigger.EnterActions>
	 												<BeginStoryboard x:Name="PressedOn_BeginStoryboard" Storyboard="{StaticResource PressedOn}"/>
	 											</Trigger.EnterActions>
	 										</Trigger>
	 										<Trigger Property="IsMouseOver" Value="True">
	 											<Trigger.ExitActions>
	 												<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
	 											</Trigger.ExitActions>
	 											<Trigger.EnterActions>
	 												<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
	 											</Trigger.EnterActions>
	 										</Trigger>
	 									</ControlTemplate.Triggers>
	 								</ControlTemplate>
	 							</Button.Template>
	 						</Button>
	 						<DatePickerTextBox x:Name="PART_TextBox" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Grid.Column="0" Grid.Row="0" Template="{DynamicResource NuclearDatePickerTextBox}"/>
	 						<Grid x:Name="PART_DisabledVisual" IsHitTestVisible="False" Opacity="0" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0">
	 							<Grid.ColumnDefinitions>
	 								<ColumnDefinition Width="*"/>
	 								<ColumnDefinition Width="Auto"/>
	 							</Grid.ColumnDefinitions>
	 							<Rectangle Fill="#A5FFFFFF" Grid.Column="0" Grid.Row="0"/>
	 							<Rectangle Fill="#A5FFFFFF" Margin="3,0,3,0" Width="19" Height="18" Grid.Column="1" Grid.Row="0"/>
	 							<Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" StaysOpen="False"/>
	 						</Grid>
	 					</Grid>
	 				</Border>
	 				<ControlTemplate.Triggers>
	 					<Trigger Property="IsEnabled" Value="False">
	 						<Setter Property="Opacity" TargetName="PART_DisabledVisual" Value="1"/>
	 					</Trigger>
	 				</ControlTemplate.Triggers>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 </Style>
	 <ControlTemplate x:Key="NuclearDatePickerTextBox" TargetType="DatePickerTextBox">
	 <ControlTemplate.Resources>
    		<Storyboard x:Key="HoverOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="HoverOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="FocusedOn">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.7"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    		<Storyboard x:Key="FocusedOff">
    			<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusedBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
    				<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
    			</DoubleAnimationUsingKeyFrames>
    		</Storyboard>
    	</ControlTemplate.Resources>
	 	<Grid>
	 		<Grid.Resources>
	 			<SolidColorBrush x:Key="WatermarkBrush" Color="#FFAAAAAA"/>
	 		</Grid.Resources>
		
			
<Border x:Name="MainBorder" Background="{DynamicResource NormalBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto"/>
    		<Border x:Name="HoverBorder" Background="{DynamicResource SelectedBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto" Opacity="0"/>
    		<Border x:Name="FocusedBorder" Background="{DynamicResource SelectedBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource NormalBorderBrush}" Width="Auto" Height="Auto" Opacity="0"/>			
			<Border x:Name="Border" Opacity="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3,3,3,3" Padding="{TemplateBinding Padding}">
	 			<Grid x:Name="WatermarkContent" >
	 				<Border x:Name="ContentElement" BorderBrush="{x:Null}" BorderThickness="1,1,1,1" Background="{x:Null}"/>
	 				<Border BorderBrush="{x:Null}" BorderThickness="1,1,1,1">
	 					<ContentControl x:Name="PART_Watermark" Content="Show Calendar" Padding="2,2,2,2" Focusable="False" IsHitTestVisible="False" Opacity="0" Style="{DynamicResource ContentControlStyle1}"/>
	 				</Border>
					<Border Width="Auto" Height="Auto" BorderBrush="{DynamicResource PressedBrush}" BorderThickness="1" Margin="2,2,2,2" x:Name="InsideBorder">
	 					<ScrollViewer Margin="0,0,0,0" x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
	 						<ScrollViewer.Background>
	 							<SolidColorBrush Color="{DynamicResource WhiteColor}"/>
	 						</ScrollViewer.Background>
	 					</ScrollViewer>
	 				</Border>
					<Border x:Name="FocusVisual" IsHitTestVisible="False" Opacity="0" BorderBrush="#FF45D6FA" CornerRadius="1,1,1,1"/>
	 			</Grid>
	 		</Border>
	 	</Grid>
	 	<ControlTemplate.Triggers>
	 		<Trigger Property="IsFocused" Value="True">
	 			<Trigger.ExitActions>
	 				<BeginStoryboard x:Name="FocusedOff_BeginStoryboard" Storyboard="{StaticResource FocusedOff}"/>
	 			</Trigger.ExitActions>
	 			<Trigger.EnterActions>
	 				<BeginStoryboard x:Name="FocusedOn_BeginStoryboard" Storyboard="{StaticResource FocusedOn}"/>
	 			</Trigger.EnterActions>
	 		</Trigger>
	 		<MultiTrigger>
	 			<MultiTrigger.ExitActions>
	 				<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
	 			</MultiTrigger.ExitActions>
	 			<MultiTrigger.EnterActions>
	 				<BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
	 			</MultiTrigger.EnterActions>
	 			<MultiTrigger.Conditions>
	 				<Condition Property="IsMouseOver" Value="True"/>
	 				<Condition Property="IsFocused" Value="False"/>
	 			</MultiTrigger.Conditions>
	 		</MultiTrigger>
	 	</ControlTemplate.Triggers>
	 </ControlTemplate>
	 <Style x:Key="ContentControlStyle1" TargetType="{x:Type ContentControl}">
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="{x:Type ContentControl}">
	 				<ContentPresenter/>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 </Style>
	 <Style TargetType="DataGrid">
	 	<Setter Property="Background">
	 		<Setter.Value>
	 			<SolidColorBrush Color="{DynamicResource PressedColor2}"/>
	 		</Setter.Value>
	 	</Setter>
	 	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
	 	<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
	 	<Setter Property="BorderThickness" Value="1,1,1,1"/>
	 	<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
	 	<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="DataGrid">
	 				<Border SnapsToDevicePixels="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
	 					<ScrollViewer x:Name="DG_ScrollViewer" Focusable="False">
	 						<ScrollViewer.Template>
	 							<ControlTemplate TargetType="{x:Type ScrollViewer}">
	 								<Grid>
	 									<Grid.ColumnDefinitions>
	 										<ColumnDefinition Width="Auto"/>
	 										<ColumnDefinition Width="*"/>
	 										<ColumnDefinition Width="Auto"/>
	 									</Grid.ColumnDefinitions>
	 									<Grid.RowDefinitions>
	 										<RowDefinition Height="Auto"/>
	 										<RowDefinition Height="*"/>
	 										<RowDefinition Height="Auto"/>
	 									</Grid.RowDefinitions>
	 									<Button Template="{StaticResource SelectAllButtonTemplate}" Command="{x:Static DataGrid.SelectAllCommand}" Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=CellsPanelHorizontalOffset}" Focusable="false" Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, 
											Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter},
											 ConverterParameter={x:Static DataGridHeadersVisibility.All}}" />
	 									<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1">
	 										<DataGridColumnHeadersPresenter.Visibility>
	 											<Binding Path="HeadersVisibility" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType=DataGrid}">
	 												<Binding.ConverterParameter>
	 													<DataGridHeadersVisibility>Column</DataGridHeadersVisibility>
	 												</Binding.ConverterParameter>
	 											</Binding>
	 										</DataGridColumnHeadersPresenter.Visibility>
	 									</DataGridColumnHeadersPresenter>
	 									<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Grid.ColumnSpan="2" Grid.Row="1" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False"/>
	 									<ScrollBar x:Name="PART_VerticalScrollBar" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="2" Grid.Row="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
	 									<Grid Grid.Column="1" Grid.Row="2">
	 										<Grid.ColumnDefinitions>
	 											<ColumnDefinition Width="{Binding Path=NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType=DataGrid}}"/>
	 											<ColumnDefinition Width="*"/>
	 										</Grid.ColumnDefinitions>
	 										<ScrollBar x:Name="PART_HorizontalScrollBar" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
	 									</Grid>
	 								</Grid>
	 							</ControlTemplate>
	 						</ScrollViewer.Template>
	 						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
	 					</ScrollViewer>
	 				</Border>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 	<Style.Triggers>
	 		<Trigger Property="IsGrouping" Value="True">
	 			<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
	 		</Trigger>
	 	</Style.Triggers>
	 </Style>
	 
	     <Style TargetType="GridSplitter">
        <Setter Property="Background" Value="{StaticResource PressedBrush}"/>
        <Setter Property="IsTabStop" Value="true"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="PreviewStyle">
            <Setter.Value>
                <Style TargetType="Control">
                    <Setter Property="Background" Value="#FF868686"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Control">
                                <Grid x:Name="Root" Opacity=".5">
                                    <Rectangle Fill="{TemplateBinding Background}"/>
                                    <Grid x:Name="HorizontalTemplate" Height="6"/>
                                    <Grid x:Name="VerticalTemplate" Visibility="Collapsed" Width="6"/>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Grid x:Name="Root" IsHitTestVisible="{TemplateBinding IsEnabled}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="{TemplateBinding Background}" StrokeThickness="0"/>
                        <Grid x:Name="HorizontalTemplate" Height="10">
                            <StackPanel Height="6" VerticalAlignment="Center">
                                <Rectangle Fill="{StaticResource GlyphBrush}" Height="1" Margin="1" StrokeThickness="0" Width="10"/>
                                <Rectangle Fill="{StaticResource GlyphBrush}" Height="1" Margin="1" StrokeThickness="0" Width="10"/>
                            </StackPanel>
                        </Grid>
                        <Grid x:Name="VerticalTemplate" Visibility="Collapsed" Width="10">
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Width="6">
                                <Rectangle Fill="#FF868686" Height="10" Margin="1" StrokeThickness="0" Width="1"/>
                                <Rectangle Fill="#FF868686" Height="10" Margin="1" StrokeThickness="0" Width="1"/>
                            </StackPanel>
                        </Grid>
                        <Rectangle x:Name="FocusVisual" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource HightlightBrush}" StrokeThickness="1"/>
                    </Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="VerticalAlignment" Value="Stretch">
							<Setter TargetName="VerticalTemplate" Property="Visibility" Value="Visible" />
							<Setter TargetName="HorizontalTemplate" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HorizontalAlignment" Value="Stretch">
							<Setter TargetName="HorizontalTemplate" Property="Visibility" Value="Visible" />
							<Setter TargetName="VerticalTemplate" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>
